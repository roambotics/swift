// RUN: %empty-directory(%t)
// RUN: %target-build-swift-dylib(%t/%target-library-name(PrintShims)) %S/../../Inputs/print-shims.swift -module-name PrintShims -emit-module -emit-module-path %t/PrintShims.swiftmodule
// RUN: %target-codesign %t/%target-library-name(PrintShims)
// RUN: %target-build-swift -Xfrontend -enable-experimental-concurrency -parse-sil %s -emit-ir -I %t -L %t -lPrintShim | %FileCheck %s --check-prefix=CHECK-LL
// RUN: %target-build-swift -Xfrontend -enable-experimental-concurrency -parse-sil %s -module-name main -o %t/main -I %t -L %t -lPrintShims %target-rpath(%t) 
// RUN: %target-codesign %t/main
// RUN: %target-run %t/main %t/%target-library-name(PrintShims) | %FileCheck %s

// REQUIRES: executable_test
// REQUIRES: swift_test_mode_optimize_none
// REQUIRES: concurrency
// UNSUPPORTED: use_os_stdlib

import Builtin
import Swift
import PrintShims
import _Concurrency

sil public_external @printInt64 : $@convention(thin) (Int64) -> ()
sil public_external @printGeneric : $@convention(thin) <T> (@in_guaranteed T) -> ()

struct S {
  @_hasStorage var storage: Int64 { get set }
  func structinstanceSInt64ToVoid(_ int: Int64)
  init(storage: Int64)
}

// CHECK-LL: @structinstanceSInt64ToVoidTu =
// CHECK-LL: define hidden swiftcc void @structinstanceSInt64ToVoid(%swift.task* {{%[0-9]+}}, %swift.executor* {{%[0-9]+}}, %swift.context* swiftasync {{%[0-9]+}}) {{#[0-9]*}} {
sil hidden @structinstanceSInt64ToVoid : $@async @convention(method) (Int64, S) -> () {
bb0(%int : $Int64, %self : $S):
  %takeSAndInt64 = function_ref @takeSAndInt64 : $@async @convention(thin) (S, Int64) -> ()
  %takeSAndInt64_result = apply %takeSAndInt64(%self, %int) : $@async @convention(thin) (S, Int64) -> ()
  %out = tuple ()
  return %out : $()
}

sil hidden @takeSAndInt64 : $@async @convention(thin) (S, Int64) -> () {
bb0(%self : $S, %int : $Int64):
  %s_addr = alloc_stack $S
  store %self to %s_addr : $*S
  %printGeneric = function_ref @printGeneric : $@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0) -> ()
  %printGeneric_result = apply %printGeneric<S>(%s_addr) : $@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0) -> () // CHECK: S(storage: 987654321)
  dealloc_stack %s_addr : $*S
  %printInt64 = function_ref @printInt64 : $@convention(thin) (Int64) -> ()
  %printInt64_result = apply %printInt64(%int) : $@convention(thin) (Int64) -> () // CHECK: 123456789
  %out = tuple ()
  return %out : $()
}

sil @test_case : $@convention(thin) @async () -> () {
  %s_type = metatype $@thin S.Type
  %storage_literal = integer_literal $Builtin.Int64, 987654321
  %storage = struct $Int64 (%storage_literal : $Builtin.Int64)
  %s = struct $S (%storage : $Int64)
  %int_literal = integer_literal $Builtin.Int64, 123456789
  %int = struct $Int64 (%int_literal : $Builtin.Int64)
  %structinstanceSInt64ToVoid = function_ref @structinstanceSInt64ToVoid : $@async @convention(method) (Int64, S) -> ()
  %result = apply %structinstanceSInt64ToVoid(%int, %s) : $@async @convention(method) (Int64, S) -> ()

  %void = tuple()
  return %void : $()
}

// Defined in _Concurrency
sil @$s12_Concurrency13_runAsyncMainyyyyYKcF : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %test_case_nothrow = function_ref @test_case : $@convention(thin) @async () -> ()
  %test_case = convert_function %test_case_nothrow : $@convention(thin) @async () -> () to $@convention(thin) @async () -> @error Error
  %thick_test_case = thin_to_thick_function %test_case : $@convention(thin) @async () -> @error Error to $@callee_guaranteed @async () -> @error Error
  %runAsyncMain = function_ref @$s12_Concurrency13_runAsyncMainyyyyYKcF : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()
  %result = apply %runAsyncMain(%thick_test_case) : $@convention(thin) (@guaranteed @async @callee_guaranteed () -> @error Error) -> ()
  %out_literal = integer_literal $Builtin.Int32, 0
  %out = struct $Int32 (%out_literal : $Builtin.Int32)
  return %out : $Int32
}
