// RUN: %empty-directory(%t)
// RUN: %target-build-swift-dylib(%t/%target-library-name(PrintShims)) %S/../Inputs/print-shims.swift -module-name PrintShims -emit-module -emit-module-path %t/PrintShims.swiftmodule
// RUN: %target-codesign %t/%target-library-name(PrintShims)
// RUN: %target-build-swift -enable-experimental-feature VariadicGenerics -g -parse-sil %s -emit-ir -I %t -L %t -lPrintShim | %FileCheck %s --check-prefix=CHECK-LL
// RUN: %target-build-swift -enable-experimental-feature VariadicGenerics -g -parse-sil %s -module-name main -o %t/main -I %t -L %t -lPrintShims %target-rpath(%t)
// RUN: %target-codesign %t/main
// RUN: %target-run %t/main %t/%target-library-name(PrintShims) | %FileCheck %s

// REQUIRES: executable_test

// Because of -enable-experimental-feature VariadicGenerics
// REQUIRES: asserts
// Because generic specialization does not work yet.
// REQUIRES: swift_test_mode_optimize_none

import Builtin
import Swift
import PrintShims

sil public_external @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()

protocol P {
  static func static_member_fn()
}

struct A : P {
  static func static_member_fn()
}
struct B : P {
  static func static_member_fn()
}
struct C : P {
  static func static_member_fn()
}
struct D : P {
  static func static_member_fn()
}
struct E : P {
  static func static_member_fn()
}
struct F : P {
  static func static_member_fn()
}
struct G : P {
  static func static_member_fn()
}

sil private @A_static_member_fn : $@convention(witness_method: P) (@thick A.Type) -> () {
bb0(%0 : $@thick A.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<A>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table A : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @A_static_member_fn
}
sil private @B_static_member_fn : $@convention(witness_method: P) (@thick B.Type) -> () {
bb0(%0 : $@thick B.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<B>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table B : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @B_static_member_fn
}
sil private @C_static_member_fn : $@convention(witness_method: P) (@thick C.Type) -> () {
bb0(%0 : $@thick C.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<C>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table C : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @C_static_member_fn
}
sil private @D_static_member_fn : $@convention(witness_method: P) (@thick D.Type) -> () {
bb0(%0 : $@thick D.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<D>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table D : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @D_static_member_fn
}
sil private @E_static_member_fn : $@convention(witness_method: P) (@thick E.Type) -> () {
bb0(%0 : $@thick E.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<E>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table E : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @E_static_member_fn
}
sil private @F_static_member_fn : $@convention(witness_method: P) (@thick F.Type) -> () {
bb0(%0 : $@thick F.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<F>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table F : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @F_static_member_fn
}
sil private @G_static_member_fn : $@convention(witness_method: P) (@thick G.Type) -> () {
bb0(%0 : $@thick G.Type):
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<G>(%0) : $@convention(thin) <T> (@thick T.Type) -> ()
  %4 = tuple ()
  return %4 : $()
}
sil_witness_table G : P module main {
  method #P.static_member_fn: <Self where Self : P> (Self.Type) -> () -> () : @G_static_member_fn
}

sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%argc : $Int32, %argv : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %0 = integer_literal $Builtin.Word, 0
  %1 = integer_literal $Builtin.Word, 1
  %2 = integer_literal $Builtin.Word, 2
  %3 = integer_literal $Builtin.Word, 3
  %4 = integer_literal $Builtin.Word, 4
  %5 = integer_literal $Builtin.Word, 5



  %two_archetypes_from_two_params_no_singles = function_ref @two_archetypes_from_two_params_no_singles : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ---0--> ^
  // CHECK: A
  // U_2 -> {D, E, F, A, B, C}
  // ---0--> ^
  // CHECK: D
  apply %two_archetypes_from_two_params_no_singles<Pack{A, B, C}, Pack{D, E, F}>(%0) : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ----1----> ^
  // CHECK: B
  // U_2 -> {D, E, F, A, B, C}
  // ----1----> ^
  // CHECK: E
  apply %two_archetypes_from_two_params_no_singles<Pack{A, B, C}, Pack{D, E, F}>(%1) : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ------2-----> ^
  // CHECK: C
  // U_2 -> {D, E, F, A, B, C}
  // ------2-----> ^
  // CHECK: F
  apply %two_archetypes_from_two_params_no_singles<Pack{A, B, C}, Pack{D, E, F}>(%2) : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -------3-------> ^
  // CHECK: D
  // U_2 -> {D, E, F, A, B, C}
  // -------3-------> ^
  // CHECK: A
  apply %two_archetypes_from_two_params_no_singles<Pack{A, B, C}, Pack{D, E, F}>(%3) : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ---------4--------> ^
  // CHECK: E
  // U_2 -> {D, E, F, A, B, C}
  // ---------4--------> ^
  // CHECK: B
  apply %two_archetypes_from_two_params_no_singles<Pack{A, B, C}, Pack{D, E, F}>(%4) : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -----------5---------> ^
  // CHECK: F
  // U_2 -> {D, E, F, A, B, C}
  // -----------5---------> ^
  // CHECK: C
  apply %two_archetypes_from_two_params_no_singles<Pack{A, B, C}, Pack{D, E, F}>(%5) : $@convention(thin) <T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()


  %direct_access_from_parameter = function_ref @direct_access_from_parameter : $@convention(thin) <T_1...> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // --0---> ^
  // CHECK: A
  apply %direct_access_from_parameter<Pack{A, B, C, D, E, F}>(%0) : $@convention(thin) <T_1...> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ----1----> ^
  // CHECK: B
  apply %direct_access_from_parameter<Pack{A, B, C, D, E, F}>(%1) : $@convention(thin) <T_1...> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -----2------> ^
  // CHECK: C
  apply %direct_access_from_parameter<Pack{A, B, C, D, E, F}>(%2) : $@convention(thin) <T_1...> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -------3-------> ^
  // CHECK: D
  apply %direct_access_from_parameter<Pack{A, B, C, D, E, F}>(%3) : $@convention(thin) <T_1...> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // --------4---------> ^
  // CHECK: E
  apply %direct_access_from_parameter<Pack{A, B, C, D, E, F}>(%4) : $@convention(thin) <T_1...> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ----------5----------> ^
  // CHECK: F
  apply %direct_access_from_parameter<Pack{A, B, C, D, E, F}>(%5) : $@convention(thin) <T_1...> (Builtin.Word) -> ()



  %two_archetypes_from_two_params_no_singles_with_conformance = function_ref @two_archetypes_from_two_params_no_singles_with_conformance : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ---0--> ^
  // CHECK: A
  // CHECK: A
  // U_2 -> {D, E, F, A, B, C}
  // ---0--> ^
  // CHECK: D
  // CHECK: D
  apply %two_archetypes_from_two_params_no_singles_with_conformance<Pack{A, B, C}, Pack{D, E, F}>(%0) : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ----1----> ^
  // CHECK: B
  // CHECK: B
  // U_2 -> {D, E, F, A, B, C}
  // ----1----> ^
  // CHECK: E
  // CHECK: E
  apply %two_archetypes_from_two_params_no_singles_with_conformance<Pack{A, B, C}, Pack{D, E, F}>(%1) : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ------2-----> ^
  // CHECK: C
  // CHECK: C
  // U_2 -> {D, E, F, A, B, C}
  // ------2-----> ^
  // CHECK: F
  // CHECK: F
  apply %two_archetypes_from_two_params_no_singles_with_conformance<Pack{A, B, C}, Pack{D, E, F}>(%2) : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -------3-------> ^
  // CHECK: D
  // CHECK: D
  // U_2 -> {D, E, F, A, B, C}
  // -------3-------> ^
  // CHECK: A
  // CHECK: A
  apply %two_archetypes_from_two_params_no_singles_with_conformance<Pack{A, B, C}, Pack{D, E, F}>(%3) : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ---------4--------> ^
  // CHECK: E
  // CHECK: E
  // U_2 -> {D, E, F, A, B, C}
  // ---------4--------> ^
  // CHECK: B
  // CHECK: B
  apply %two_archetypes_from_two_params_no_singles_with_conformance<Pack{A, B, C}, Pack{D, E, F}>(%4) : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -----------5---------> ^
  // CHECK: F
  // CHECK: F
  // U_2 -> {D, E, F, A, B, C}
  // -----------5---------> ^
  // CHECK: C
  // CHECK: C
  apply %two_archetypes_from_two_params_no_singles_with_conformance<Pack{A, B, C}, Pack{D, E, F}>(%5) : $@convention(thin) <T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> ()


  %direct_access_from_parameter_with_conformance = function_ref @direct_access_from_parameter_with_conformance : $@convention(thin) <T_1...: P> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // --0---> ^
  // CHECK: A
  // CHECK: A
  apply %direct_access_from_parameter_with_conformance<Pack{A, B, C, D, E, F}>(%0) : $@convention(thin) <T_1... : P> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ----1----> ^
  // CHECK: B
  // CHECK: B
  apply %direct_access_from_parameter_with_conformance<Pack{A, B, C, D, E, F}>(%1) : $@convention(thin) <T_1... : P> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -----2------> ^
  // CHECK: C
  // CHECK: C
  apply %direct_access_from_parameter_with_conformance<Pack{A, B, C, D, E, F}>(%2) : $@convention(thin) <T_1... : P> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // -------3-------> ^
  // CHECK: D
  // CHECK: D
  apply %direct_access_from_parameter_with_conformance<Pack{A, B, C, D, E, F}>(%3) : $@convention(thin) <T_1... : P> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // --------4---------> ^
  // CHECK: E
  // CHECK: E
  apply %direct_access_from_parameter_with_conformance<Pack{A, B, C, D, E, F}>(%4) : $@convention(thin) <T_1... : P> (Builtin.Word) -> ()
  // U_1 -> {A, B, C, D, E, F}
  // ----------5----------> ^
  // CHECK: F
  // CHECK: F
  apply %direct_access_from_parameter_with_conformance<Pack{A, B, C, D, E, F}>(%5) : $@convention(thin) <T_1... : P> (Builtin.Word) -> ()

  %outb = integer_literal $Builtin.Int32, 0
  %out = struct $Int32 (%outb : $Builtin.Int32)
  return %out : $Int32
}

sil @two_archetypes_from_two_params_no_singles : $<T_1..., T_2... where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> () {
entry(%intIndex : $Builtin.Word):
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T_1, repeat each T_2}
  %token = open_pack_element %innerIndex of <U_1..., U_2... where (repeat (each U_1, each U_2)): Any> at <Pack{repeat each T_1, repeat each T_2}, Pack{repeat each T_2, repeat each T_1}>, shape $U_2, uuid "01234567-89AB-CDEF-0123-000000000000"
  %metatype_1 = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000000") U_1).Type
  %metatype_2 = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000000") U_2).Type
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  // Print the first archetype that is bound.
  apply %printGenericType<(@pack_element("01234567-89AB-CDEF-0123-000000000000") U_1)>(%metatype_1) : $@convention(thin) <T> (@thick T.Type) -> ()
  // Print the second archetype that is bound.
  apply %printGenericType<(@pack_element("01234567-89AB-CDEF-0123-000000000000") U_2)>(%metatype_2) : $@convention(thin) <T> (@thick T.Type) -> ()
  %retval = tuple ()
  return %retval : $()
}

sil @two_archetypes_from_two_params_no_singles_with_conformance : $<T_1... : P, T_2... : P where (repeat (each T_1, each T_2)): Any> (Builtin.Word) -> () {
entry(%intIndex : $Builtin.Word):
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T_1, repeat each T_2}
  %token = open_pack_element %innerIndex of <U_1... : P, U_2... : P where (repeat (each U_1, each U_2)): Any> at <Pack{repeat each T_1, repeat each T_2}, Pack{repeat each T_2, repeat each T_1}>, shape $U_2, uuid "01234567-89AB-CDEF-0123-000000000003"
  %metatype_1 = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000003") U_1).Type
  %metatype_2 = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000003") U_2).Type
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  %static_member_fn_1 = witness_method $(@pack_element("01234567-89AB-CDEF-0123-000000000003") U_1), #P.static_member_fn : <Self where Self : P> (Self.Type) -> () -> () : $@convention(witness_method: P) <T where T : P> (@thick T.Type) -> ()
  %static_member_fn_2 = witness_method $(@pack_element("01234567-89AB-CDEF-0123-000000000003") U_2), #P.static_member_fn : <Self where Self : P> (Self.Type) -> () -> () : $@convention(witness_method: P) <T where T : P> (@thick T.Type) -> ()
  // Print the first archetype that is bound.
  apply %printGenericType<(@pack_element("01234567-89AB-CDEF-0123-000000000003") U_1)>(%metatype_1) : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %static_member_fn_1<(@pack_element("01234567-89AB-CDEF-0123-000000000003") U_1)>(%metatype_1) : $@convention(witness_method: P) <T where T : P> (@thick T.Type) -> ()
  // Print the second archetype that is bound.
  apply %printGenericType<(@pack_element("01234567-89AB-CDEF-0123-000000000003") U_2)>(%metatype_2) : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %static_member_fn_2<(@pack_element("01234567-89AB-CDEF-0123-000000000003") U_2)>(%metatype_2) : $@convention(witness_method: P) <T where T : P> (@thick T.Type) -> ()
  %retval = tuple ()
  return %retval : $()
}

// Verify that we just gep into a parameter pack when that's all that the pack consists of.
// CHECK-LL: define {{.*}}void @direct_access_from_parameter(i{{(32|64)}} [[INDEX:%[^,]+]], i{{(32|64)}} {{%[^,]+}}, %swift.type** [[PACK:%[^,]+]])
// CHECK-LL:   [[ELEMENT_ADDRESS:%[^,]+]] = getelementptr inbounds %swift.type*, %swift.type** [[PACK]], i{{(32|64)}} [[INDEX]]
// CHECK-LL:   [[ELEMENT:%[^,]+]] = load %swift.type*, %swift.type** [[ELEMENT_ADDRESS]]
// CHECK-LL:   call swiftcc void @printGenericType(%swift.type* [[ELEMENT]], %swift.type* [[ELEMENT]])
sil @direct_access_from_parameter : $<T_1...> (Builtin.Word) -> () {
entry(%intIndex : $Builtin.Word):
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T_1}
  %token = open_pack_element %innerIndex of <U_1...> at <Pack{repeat each T_1}>, shape $U_1, uuid "01234567-89AB-CDEF-0123-000000000001"
  %metatype_1 = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000001") U_1).Type
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<(@pack_element("01234567-89AB-CDEF-0123-000000000001") U_1)>(%metatype_1) : $@convention(thin) <T> (@thick T.Type) -> ()
  %t = tuple ()
  return %t : $()
}

sil @direct_access_from_parameter_with_conformance : $<T_1... : P> (Builtin.Word) -> () {
entry(%intIndex : $Builtin.Word):
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T_1}
  %token = open_pack_element %innerIndex of <U_1... : P> at <Pack{repeat each T_1}>, shape $U_1, uuid "01234567-89AB-CDEF-0123-000000000002"
  %metatype_1 = metatype $@thick (@pack_element("01234567-89AB-CDEF-0123-000000000002") U_1).Type
  %printGenericType = function_ref @printGenericType : $@convention(thin) <T> (@thick T.Type) -> ()
  apply %printGenericType<(@pack_element("01234567-89AB-CDEF-0123-000000000002") U_1)>(%metatype_1) : $@convention(thin) <T> (@thick T.Type) -> ()
  %static_member_fn = witness_method $(@pack_element("01234567-89AB-CDEF-0123-000000000002") U_1), #P.static_member_fn : <Self where Self : P> (Self.Type) -> () -> () : $@convention(witness_method: P) <T where T : P> (@thick T.Type) -> ()
  apply %static_member_fn<(@pack_element("01234567-89AB-CDEF-0123-000000000002") U_1)>(%metatype_1) : $@convention(witness_method: P) <T where T : P> (@thick T.Type) -> ()
  %t = tuple ()
  return %t : $()
}
