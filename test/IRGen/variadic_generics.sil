// RUN: %target-swift-frontend -emit-ir -primary-file %s -enable-experimental-feature VariadicGenerics | %IRGenFileCheck %s

// Because of -enable-experimental-feature VariadicGenerics
// REQUIRES: asserts

import Builtin
import Swift

// CHECK-LABEL: define{{.*}} @test_dynamic_1(
// CHECK:         ret [[INT]] 4
sil @test_dynamic_1 : $<T...> () -> Builtin.PackIndex {
bb0:
  %intIndex = integer_literal $Builtin.Word, 4
  %index = dynamic_pack_index %intIndex of $Pack{repeat each T}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_scalar_1(
// CHECK:         ret [[INT]] 0
sil @test_scalar_1 : $<T...> () -> Builtin.PackIndex {
bb0:
  %index = scalar_pack_index 0 of $Pack{Int, repeat each T}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_scalar_2(
// CHECK:         [[INDEX:%.*]] = add [[INT]] %0, 1
// CHECK:         ret [[INT]] [[INDEX]]
sil @test_scalar_2 : $<T...> () -> Builtin.PackIndex {
bb0:
  %index = scalar_pack_index 2 of $Pack{Int, repeat each T, Int}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_scalar_3(
// CHECK:         [[T0:%.*]] = add [[INT]] %0, %0
// CHECK:         [[INDEX:%.*]] = add [[INT]] [[T0]], 2
// CHECK:         ret [[INT]] [[INDEX]]
sil @test_scalar_3 : $<T...> () -> Builtin.PackIndex {
bb0:
  %index = scalar_pack_index 4 of $Pack{Int, repeat each T, Int, repeat each T, Int}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_pack_1(
// CHECK:         ret [[INT]] 7
sil @test_pack_1 : $<T...> () -> Builtin.PackIndex {
bb0:
  %intIndex = integer_literal $Builtin.Word, 7
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T}
  %index = pack_pack_index 0, %innerIndex of $Pack{repeat each T, Int}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_pack_2(
// CHECK:         ret [[INT]] 8
sil @test_pack_2 : $<T...> () -> Builtin.PackIndex {
bb0:
  %intIndex = integer_literal $Builtin.Word, 7
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T}
  %index = pack_pack_index 1, %innerIndex of $Pack{Int, repeat each T}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_pack_3(
// CHECK:         [[T0:%.*]] = add [[INT]] %0, 1
// CHECK:         [[INDEX:%.*]] = add [[INT]] [[T0]], 7
// CHECK:         ret [[INT]] [[INDEX]]
sil @test_pack_3 : $<T...> () -> Builtin.PackIndex {
bb0:
  %intIndex = integer_literal $Builtin.Word, 7
  %innerIndex = dynamic_pack_index %intIndex of $Pack{repeat each T}
  %index = pack_pack_index 2, %innerIndex of $Pack{repeat each T, Int, repeat each T}
  return %index : $Builtin.PackIndex
}

// CHECK-LABEL: define{{.*}} @test_pack_element_get_1(
// CHECK: [[INDEX:%.*]] = add [[INT]] %1, 1
// CHECK: [[ELT_STORAGE:%.*]] = getelementptr inbounds %swift.opaque*, %swift.opaque** %0, [[INT]] [[INDEX]]
// CHECK: [[BITCAST_STORAGE:%.*]] = bitcast %swift.opaque** [[ELT_STORAGE]] to %TSi**
// CHECK: [[ELT_ADDR:%.*]] = load %TSi*, %TSi** [[BITCAST_STORAGE]], align
// CHECK: [[VALUE_ADDR:%.*]] = getelementptr inbounds %TSi, %TSi* [[ELT_ADDR]], i32 0, i32 0
// CHECK: [[RET:%.*]] = load [[INT]], [[INT]]* [[VALUE_ADDR]], align
// CHECK: ret [[INT]] [[RET]]
sil @test_pack_element_get_1 : $<T...> (@pack_owned Pack{Int, repeat each T, Int}) -> Int {
bb0(%pack : $*Pack{Int, repeat each T, Int}):
  %index = scalar_pack_index 2 of $Pack{Int, repeat each T, Int}
  %elementAddr = pack_element_get %index of %pack : $*Pack{Int, repeat each T, Int} as $*Int
  %value = load %elementAddr : $*Int
  return %value : $Int
}

// CHECK-LABEL: define{{.*}} @test_pack_element_set_1(
// CHECK: [[INDEX:%.*]] = add [[INT]] %2, 1
// CHECK: [[ELT_STORAGE:%.*]] = getelementptr inbounds %swift.opaque*, %swift.opaque** %0, [[INT]] [[INDEX]]
// CHECK: [[BITCAST_STORAGE:%.*]] = bitcast %swift.opaque** [[ELT_STORAGE]] to %TSi**
// CHECK: [[ELT_ADDR:%.*]] = load %TSi*, %TSi** [[BITCAST_STORAGE]], align
// CHECK: [[VALUE_ADDR:%.*]] = getelementptr inbounds %TSi, %TSi* [[ELT_ADDR]], i32 0, i32 0
// CHECK: store [[INT]] %1, [[INT]]* [[VALUE_ADDR]], align
// CHECK: ret void
sil @test_pack_element_set_1 : $<T...> (@pack_owned Pack{Int, repeat each T, Int}, Int) -> () {
bb0(%pack : $*Pack{Int, repeat each T, Int}, %value : $Int):
  %index = scalar_pack_index 2 of $Pack{Int, repeat each T, Int}
  %elementAddr = pack_element_get %index of %pack : $*Pack{Int, repeat each T, Int} as $*Int
  store %value to %elementAddr : $*Int
  %ret = tuple ()
  return %ret : $()
}

sil @borrow : $<T> (@in_guaranteed T) -> () {
entry(%addr : $*T):
  %ret = tuple ()
  return %ret : $()
}

// CHECK-LABEL: define {{.*}}@test_tuple_pack_element_addr_1(
// CHECK-SAME:        {{.*}}* nocapture [[TUPLE_ADDR:%[^,]+]], i{{(64|32)}} [[INDEX:%[^,]+]]
// CHECK:         [[RESPONSE:%[^,]+]] = call swiftcc %swift.metadata_response @swift_getTupleTypeMetadata
// CHECK:         [[UNCAST_METADATA:%[^,]+]] = extractvalue %swift.metadata_response [[RESPONSE]], 0
// CHECK:         [[METADATA:%[^,]+]] = bitcast %swift.type* [[UNCAST_METADATA]] to %swift.tuple_type*
// CHECK:         [[OFFSET_PTR:%[^,]+]] = getelementptr inbounds %swift.tuple_type, %swift.tuple_type* [[METADATA]], i{{(64|32)}} 0, i32 3, i{{(64|32)}} [[INDEX]]
// CHECK:         [[OFFSET:%[^,]+]] = load i32, i32* [[OFFSET_PTR]], align 8
// CHECK:         [[CAST_TUPLE_ADDR:%[^,]+]] = bitcast <{ %TSS }>* [[TUPLE_ADDR]] to i8*
// CHECK:         [[UNCAST_ELEMENT_ADDR:%[^,]+]] = getelementptr inbounds i8, i8* [[CAST_TUPLE_ADDR]], i32 [[OFFSET]]
// CHECK:         [[ELEMENT_ADDR:%[^,]+]] = bitcast i8* [[UNCAST_ELEMENT_ADDR]] to %swift.opaque*
// CHECK:         call swiftcc void @borrow(%swift.opaque* noalias nocapture [[ELEMENT_ADDR]], %swift.type* %"\CF\84_1_0")
sil @test_tuple_pack_element_addr_1 :  $<T, U> (@inout (String, T, U, Int), Builtin.Word) -> () {
bb0(%tuple : $*(String, T, U, Int), %i : $Builtin.Word):
  %index = dynamic_pack_index %i of $Pack{Float, T, U, Float}
  %0 = open_pack_element %index of <U_1...> at <Pack{String, T, U, Int}>, shape $U_1, uuid "01234567-89AB-CDEF-0123-000000000004"
  %elt = tuple_pack_element_addr %index of %tuple : $*(String, T, U, Int) as $*@pack_element("01234567-89AB-CDEF-0123-000000000004") U_1
  %blackhole = function_ref @borrow : $@convention(thin) <T> (@in_guaranteed T) -> ()
  apply %blackhole<(@pack_element("01234567-89AB-CDEF-0123-000000000004") U_1)>(%elt) : $@convention(thin) <T> (@in_guaranteed T) -> ()
  %ret = tuple ()
  return %ret : $()
}
