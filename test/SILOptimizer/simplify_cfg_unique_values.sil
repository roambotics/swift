// RUN: %target-sil-opt -enable-sil-verify-all %s -simplify-cfg | %FileCheck %s

sil_stage canonical

import Builtin
import Swift

enum DupCaseEnum {
  case firstCase
  case secondCase
}

// CHECK-LABEL: sil @performSwitch : $@convention(thin) (Int64, @thin DupCaseEnum.Type) -> DupCaseEnum {
// CHECK: bb0(%0 : $Int64, %1 : $@thin DupCaseEnum.Type):
// CHECK:   select_value
// CHECK-NEXT:   return
sil @performSwitch : $@convention(thin) (Int64, @thin DupCaseEnum.Type) -> DupCaseEnum {
// %0
bb0(%0 : $Int64, %1 : $@thin DupCaseEnum.Type):
  %4 = integer_literal $Builtin.Int64, 0
  %5 = struct_extract %0 : $Int64, #Int64._value
  %6 = builtin "cmp_eq_Int64"(%4 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1
  cond_br %6, bb6, bb1

bb1:
  br bb2

bb2:
  cond_br %6, bb5, bb3

bb3:
  br bb4

bb4:
  %12 = enum $DupCaseEnum, #DupCaseEnum.secondCase!enumelt
  br bb7(%12 : $DupCaseEnum)

bb5:
  %14 = enum $DupCaseEnum, #DupCaseEnum.firstCase!enumelt
  br bb7(%14 : $DupCaseEnum)

bb6:
  %16 = enum $DupCaseEnum, #DupCaseEnum.firstCase!enumelt
  br bb7(%16 : $DupCaseEnum)

// %18
bb7(%18 : $DupCaseEnum):
  return %18 : $DupCaseEnum
}

// CHECK-LABEL: sil @performSwitch_bail_out : $@convention(thin) (Int64, @thin DupCaseEnum.Type) -> DupCaseEnum {
// CHECK: bb0(%0 : $Int64, %1 : $@thin DupCaseEnum.Type):
// CHECK-NOT:   select_value
// CHECK-NOT:   br bb1
// CHECK:   cond_br
sil @performSwitch_bail_out : $@convention(thin) (Int64, @thin DupCaseEnum.Type) -> DupCaseEnum {
// %0
bb0(%0 : $Int64, %1 : $@thin DupCaseEnum.Type):
  %4 = integer_literal $Builtin.Int64, 0
  %5 = struct_extract %0 : $Int64, #Int64._value
  %6 = builtin "cmp_eq_Int64"(%4 : $Builtin.Int64, %5 : $Builtin.Int64) : $Builtin.Int1
  cond_br %6, bb6, bb1

bb1:
  br bb2

bb2:
  cond_br %6, bb5, bb3

bb3:
  br bb4

bb4:
  %12 = enum $DupCaseEnum, #DupCaseEnum.secondCase!enumelt
  br bb7(%12 : $DupCaseEnum)

bb5:
  %14 = enum $DupCaseEnum, #DupCaseEnum.secondCase!enumelt
  br bb7(%14 : $DupCaseEnum)

bb6:
  %16 = enum $DupCaseEnum, #DupCaseEnum.firstCase!enumelt
  br bb7(%16 : $DupCaseEnum)

// %18
bb7(%18 : $DupCaseEnum):
  return %18 : $DupCaseEnum
}
