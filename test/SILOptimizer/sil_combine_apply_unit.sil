// RUN: %target-sil-opt -enable-sil-verify-all %s -test-runner | %FileCheck %s

import Builtin

struct Input {}
struct Output {}
enum Nunca {}

sil @rdar127452206_callee : $@convention(thin) @Sendable @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0) -> (@out τ_0_2, @error_indirect τ_0_1) for <Input, Nunca, Output>

// CHECK-LABEL: sil @rdar127452206 : {{.*}} {
// CHECK:       bb0([[INPUT:%[^,]+]] :
// CHECK:         [[OUTPUT:%[^,]+]] = alloc_stack $Output
// CHECK:         [[NUNCA:%[^,]+]] = alloc_stack $Nunca
// CHECK:         [[OUTPUT_AS_OUTPUT:%[^,]+]] = unchecked_addr_cast [[OUTPUT]]
// CHECK:         [[NUNCA_AS_NUNCA:%[^,]+]] = unchecked_addr_cast [[NUNCA]]
// CHECK:         [[INPUT_AS_INPUT:%[^,]+]] = unchecked_addr_cast [[INPUT]]
// CHECK:         apply [nothrow] {{%[^,]+}}([[OUTPUT_AS_OUTPUT]], [[NUNCA_AS_NUNCA]], [[INPUT_AS_INPUT]])
// CHECK-LABEL: } // end sil function 'rdar127452206'
sil @rdar127452206 : $@convention(thin) (@in Input) -> () {
entry(%input : $*Input):
  %output = alloc_stack $Output
  %nunca = alloc_stack $Nunca
  %callee = function_ref @rdar127452206_callee : $@convention(thin) @Sendable @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0) -> (@out τ_0_2, @error_indirect τ_0_1) for <Input, Nunca, Output>
  %convert = convert_function %callee : $@convention(thin) @Sendable @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0) -> (@out τ_0_2, @error_indirect τ_0_1) for <Input, Nunca, Output> to $@convention(thin) @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0) -> (@out τ_0_2, @error_indirect τ_0_1) for <Input, Nunca, Output> // user: %216
  specify_test "sil_combine_instruction @instruction[4]"
  apply [nothrow] %convert(%output, %nunca, %input) : $@convention(thin) @substituted <τ_0_0, τ_0_1, τ_0_2> (@in_guaranteed τ_0_0) -> (@out τ_0_2, @error_indirect τ_0_1) for <Input, Nunca, Output>
  dealloc_stack %nunca : $*Nunca
  dealloc_stack %output : $*Output
  %retval = tuple ()
  return %retval : $()
}


