// RUN: %target-sil-opt -opt-mode=none  -enable-sil-verify-all %s -ssa-destroy-hoisting | %FileCheck %s --check-prefix=CHECK --check-prefix=CHECKDEB
// RUN: %target-sil-opt -opt-mode=speed -enable-sil-verify-all %s -ssa-destroy-hoisting | %FileCheck %s --check-prefix=CHECK --check-prefix=CHECKOPT
//
// TODO: migrate the remaining tests from destroy_hoisting.sil.

sil_stage canonical

import Builtin

class X {
}

enum TwoCases {
  case A(X)
  case B
}

struct S {
  var x: X
}

struct Outer {
  var s: S
  var ox: X
}

struct Mixed {
  var x: X
  var i: Builtin.Int64
}

public struct S2 {
  let s: S
}


public enum E {
  case A
  case B
}

sil @unknown : $@convention(thin) () -> ()
sil @use_S : $@convention(thin) (@in_guaranteed S) -> ()

sil @f_out : $@convention(thin) <T> () -> @out T
sil @f_bool : $@convention(thin) () -> Builtin.Int1

// CHECK-LABEL: sil [ossa] @test_simple
// CHECK:      bb0(%0 : $*S):
// CHECK-NEXT:   destroy_addr %0
// CHECK-NEXT:   br bb1
// CHECK:      bb1:
// CHECK-NEXT:   tuple
// CHECK-NEXT:   return
sil [ossa] @test_simple : $@convention(thin) (@in S) -> () {
bb0(%0 : $*S):
  br bb1
bb1:
  destroy_addr %0 : $*S
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @combine_load
// CHECK:      bb0(%0 : $*S):
// CHECK-NEXT:   load [take] %0
// CHECK-NEXT:   br bb1
// CHECK:      bb1:
// CHECK-NEXT:   return
sil [ossa] @combine_load : $@convention(thin) (@in S) -> @owned S {
bb0(%0 : $*S):
  %v = load [copy] %0 : $*S
  br bb1
bb1:
  destroy_addr %0 : $*S
  return %v : $S
}

// CHECK-LABEL: sil [ossa] @combine_copy_addr
// CHECK:      bb0(%0 : $*S, %1 : $*S):
// CHECK-NEXT:   copy_addr [take] %1 to [initialization] %0
// CHECK-NEXT:   br bb1
// CHECK:      bb1:
// CHECK-NEXT:   tuple
// CHECK-NEXT:   return
sil [ossa] @combine_copy_addr : $@convention(thin) (@in S) -> @out S {
bb0(%0 : $*S, %1 : $*S):
  copy_addr %1 to [initialization] %0 : $*S
  br bb1
bb1:
  destroy_addr %1 : $*S
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @tail_merging
// CHECK:      bb1:
// CHECK:        apply
// CHECK-NEXT:   br bb3
// CHECK:      bb2:
// CHECK-NEXT:   br bb3
// CHECK:      bb3:
// CHECK-NEXT:   destroy_addr %0
// CHECK-NEXT:   br bb4
// CHECK:      bb4:
// CHECK-NEXT:   tuple
// CHECK-NEXT:   return
sil [ossa] @tail_merging : $@convention(thin) (@in S) -> () {
bb0(%0 : $*S):
  cond_br undef, bb1, bb2
bb1:
  %f = function_ref @use_S : $@convention(thin) (@in_guaranteed S) -> ()
  %a = apply %f(%0) : $@convention(thin) (@in_guaranteed S) -> ()
  br bb3
bb2:
  br bb3
bb3:
  br bb4
bb4:
  destroy_addr %0 : $*S
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil hidden [ossa] @backward_init : $@convention(thin) <T> () -> @out T {
// CHECK: [[A:%.*]] = alloc_stack $T
// CHECK: apply
// CHECK: debug_value [[A]] : $*T, expr op_deref
// CHECK-OPT: copy_addr [take] [[A]] to [initialization] %0 : $*T
// CHECKOPT-NOT: destroy_addr
// CHECKOPT-NOT: debug_value [[A]]
// CHECKDEB: copy_addr [[A]] to [initialization] %0 : $*T
// CHECKDEB: debug_value [[A]]
// CHECKDEB-NEXT: destroy_addr [[A]] : $*T
// CHECK-LABEL: } // end sil function 'backward_init'
sil hidden [ossa] @backward_init : $@convention(thin) <T> () -> @out T {
bb0(%0 : $*T):
  %l1 = alloc_stack $T
  %f1 = function_ref @f_out : $@convention(thin) <τ_0_0> () -> @out τ_0_0
  %c1 = apply %f1<T>(%l1) : $@convention(thin) <τ_0_0> () -> @out τ_0_0
  debug_value %l1 : $*T, expr op_deref
  copy_addr %l1 to [initialization] %0 : $*T
  debug_value %0 : $*T, expr op_deref
  debug_value %l1 : $*T, expr op_deref
  destroy_addr %l1 : $*T
  dealloc_stack %l1 : $*T
  %t = tuple ()
  return %t : $()
}

// With optimization, the destroy_addr is hoisted above debug_value in
// bb2.  Dead debug instructions then need to be deleted before the
// destroy can be merged back onto bb3.
//
// CHECK-LABEL: sil hidden [ossa] @destroyDiamond : $@convention(thin) <T> (@in_guaranteed T, Builtin.Int1) -> () {
// CHECK: bb0(%0 : $*T, %1 : $Builtin.Int1):
// CHECK:   [[ALLOC:%.*]] = alloc_stack $T, var, name "t"
// CHECK-NOT: destroy
// CHECK:   cond_br %{{.*}}, bb1, bb2
// CHECK: bb1:
// CHECK:    apply %{{.*}}() : $@convention(thin) () -> ()
// CHECK-NOT: destroy_addr
// CHECK:   br bb3
// CHECK: bb2:
// CHECKDEB: debug_value [[ALLOC]] : $*T, let, name "t"
// CHECK-NOT: debug_val [[ALLOC]]
// CHECK:   br bb3
// CHECK: bb3:
// CHECK:   destroy_addr [[ALLOC]] : $*T
// CHECK:   return
// CHECK-LABEL: } // end sil function 'destroyDiamond'
sil hidden [ossa] @destroyDiamond : $@convention(thin) <T> (@in_guaranteed T, Builtin.Int1) -> () {
bb0(%0 : $*T, %1 : $Builtin.Int1):
  debug_value %0 : $*T, let, name "arg", argno 1, expr op_deref
  debug_value %1 : $Builtin.Int1, let, name "z", argno 2
  %4 = alloc_stack $T, var, name "t"
  copy_addr %0 to [initialization] %4 : $*T
  cond_br %1, bb1, bb2

bb1:
  %8 = function_ref @unknown : $@convention(thin) () -> ()
  %9 = apply %8() : $@convention(thin) () -> ()
  br bb3

bb2:
  debug_value %4 : $*T, let, name "t"
  br bb3

bb3:
  destroy_addr %4 : $*T
  dealloc_stack %4 : $*T
  %14 = tuple ()
  return %14 : $()
}

// CHECK-LABEL: sil hidden [ossa] @destroyLoop : $@convention(thin) <T> (@in_guaranteed T) -> () {
// CHECK:   [[ALLOC:%.*]] = alloc_stack $T, var, name "t"
// CHECK:   br bb1
// CHECK: bb1:
// CHECK:   apply %{{.*}}() : $@convention(thin) () -> Builtin.Int1
// CHECK-NEXT:   cond_br %{{.*}}, bb2, bb3
// CHECK: bb2:
// CHECK-NEXT: br bb1
// CHECK: bb3:
// CHECKDEB:   debug_value [[ALLOC]] : $*T, let, name "t"
// CHECKOPT-NONE: debug_value
// CHECK:   destroy_addr [[ALLOC]] : $*T
// CHECK:   dealloc_stack [[ALLOC]] : $*T
// CHECK-LABEL: } // end sil function 'destroyLoop'
sil hidden [ossa] @destroyLoop : $@convention(thin) <T> (@in_guaranteed T) -> () {
bb0(%0 : $*T):
  %a = alloc_stack $T, var, name "t"
  copy_addr %0 to [initialization] %a : $*T
  br bb1

bb1:
  %f = function_ref @f_bool : $@convention(thin) () -> Builtin.Int1
  %c = apply %f() : $@convention(thin) () -> Builtin.Int1
  cond_br %c, bb2, bb3

bb2:
  br bb1

bb3:
  debug_value %a : $*T, let, name "t"
  destroy_addr %a : $*T
  dealloc_stack %a : $*T
  %16 = tuple ()
  return %16 : $()
}

