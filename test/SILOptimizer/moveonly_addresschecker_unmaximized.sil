// RUN: %target-sil-opt                                                \
// RUN:     -sil-move-only-address-checker                             \
// RUN:     %s                                                         \
// RUN:     -module-name moveonly_addresschecker                       \
// RUN:     -enable-experimental-feature MoveOnlyPartialConsumption    \
// RUN:     -enable-experimental-feature MoveOnlyClasses               \
// RUN:     -enable-sil-verify-all                                     \
// RUN:     -move-only-address-checker-disable-lifetime-extension=true \
// RUN: | %FileCheck %s

import Builtin

@_moveOnly
struct M {
  deinit {}
}

@_moveOnly
struct M4 {
  let s1: M
  let s2: M
  let s3: M
  let s4: M
}

sil @get_M4 : $@convention(thin) () -> @owned M4
sil @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
sil @see_addr_2 : $@convention(thin) (@in_guaranteed M, @in_guaranteed M) -> ()
sil @replace_2 : $@convention(thin) (@inout M, @inout M) -> ()
sil @get_out_2 : $@convention(thin) () -> (@out M, @out M)
sil @take_addr_2 : $@convention(thin) (@in M, @in M) -> ()

/// Two non-contiguous fields (#M4.s2, #M4.s4) are borrowed by @see_addr_2.
/// Two non-contiguous fields (#M4.s1, #M$.s3) are consumed by @end_2.
///
/// Verify that #M4.s2 and #M4.s4 both survive past the apply of @see_addr_2.
// CHECK-LABEL:  sil [ossa] @rdar110676577 : {{.*}} {
// CHECK:          [[STACK:%[^,]+]] = alloc_stack $M4
// CHECK:          [[GET_M4:%[^,]+]] = function_ref @get_M4
// CHECK:          [[M4:%[^,]+]] = apply [[GET_M4]]() : $@convention(thin) () -> @owned M4
// CHECK:          store [[M4]] to [init] [[STACK]] : $*M4
// CHECK:          [[M4_S2_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s2
// CHECK:          [[M4_S4_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s4
// CHECK:          [[SEE_ADDR_2:%[^,]+]] = function_ref @see_addr_2
// CHECK:          apply [[SEE_ADDR_2]]([[M4_S2_ADDR]], [[M4_S4_ADDR]])
// CHECK:          [[M4_S4_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s4
// CHECK:          destroy_addr [[M4_S4_ADDR_2]]
// CHECK:          [[M4_S2_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s2
// CHECK:          destroy_addr [[M4_S2_ADDR_2]]
// CHECK:          [[M4_S1_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s1
// CHECK:          [[M4_S1:%[^,]+]] = load [take] [[M4_S1_ADDR]] : $*M
// CHECK:          [[M4_S3_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s3
// CHECK:          [[M4_S3:%[^,]+]] = load [take] [[M4_S3_ADDR]] : $*M
// CHECK:          [[END_2:%[^,]+]] = function_ref @end_2
// CHECK:          apply [[END_2]]([[M4_S1]], [[M4_S3]])
// CHECK-LABEL: } // end sil function 'rdar110676577'
sil [ossa] @rdar110676577 : $@convention(thin) () -> () {
bb0:
  %0 = alloc_stack $M4
  %1 = mark_unresolved_non_copyable_value [consumable_and_assignable] %0 : $*M4
  %3 = function_ref @get_M4 : $@convention(thin) () -> @owned M4
  %4 = apply %3() : $@convention(thin) () -> @owned M4
  store %4 to [init] %1 : $*M4
  %6 = struct_element_addr %1 : $*M4, #M4.s2
  %6a = struct_element_addr %1 : $*M4, #M4.s4
  %see_addr_2 = function_ref @see_addr_2 : $@convention(thin) (@in_guaranteed M, @in_guaranteed M) -> ()
  apply %see_addr_2(%6, %6a) : $@convention(thin) (@in_guaranteed M, @in_guaranteed M) -> ()
  %12 = struct_element_addr %1 : $*M4, #M4.s1
  %13 = load [copy] %12 : $*M
  %14 = struct_element_addr %1 : $*M4, #M4.s3
  %15 = load [copy] %14 : $*M
  %16 = function_ref @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
  %17 = apply %16(%13, %15) : $@convention(thin) (@owned M, @owned M) -> ()
  destroy_addr %1 : $*M4
  dealloc_stack %0 : $*M4
  %22 = tuple ()
  return %22 : $()
}

// Two non-contiguous fields (#M4.s2, #M4.s4) are reinitialized by @replace_2.
//
// Verify that #M4.s4 is not destroyed before being passed to replace_2.
// CHECK-LABEL: sil [ossa] @rdar111356251 : $@convention(thin) () -> () {
// CHECK:         [[STACK:%[^,]+]] = alloc_stack $M4
// CHECK:         [[GET_M4:%[^,]+]] = function_ref @get_M4 : $@convention(thin) () -> @owned M4
// CHECK:         [[INSTANCE:%[^,]+]] = apply [[GET_M4]]() : $@convention(thin) () -> @owned M4
// CHECK:         store [[INSTANCE]] to [init] [[STACK]] : $*M4
// CHECK-NOT:     destroy_addr
// CHECK:         [[S2_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s2
// CHECK:         [[S4_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s4
// CHECK:         [[REPLACE_2:%[^,]+]] = function_ref @replace_2 : $@convention(thin) (@inout M, @inout M) -> ()
// CHECK:         apply [[REPLACE_2]]([[S2_ADDR]], [[S4_ADDR]]) : $@convention(thin) (@inout M, @inout M) -> ()
// CHECK:         [[S4_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s4
// CHECK:         destroy_addr [[S4_ADDR_2]] : $*M
// CHECK:         [[S2_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s2
// CHECK:         destroy_addr [[S2_ADDR_2]] : $*M
// CHECK:         [[S1_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s1
// CHECK:         [[S1:%[^,]+]] = load [take] [[S1_ADDR]] : $*M
// CHECK:         [[S3_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s3
// CHECK:         [[S3:%[^,]+]] = load [take] [[S3_ADDR]] : $*M
// CHECK:         [[END_2:%[^,]+]] = function_ref @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
// CHECK:         apply [[END_2]]([[S1]], [[S3]]) : $@convention(thin) (@owned M, @owned M) -> ()
// CHECK-LABEL: } // end sil function 'rdar111356251'
sil [ossa] @rdar111356251 : $@convention(thin) () -> () {
bb0:
  %stack_addr = alloc_stack $M4
  %stack = mark_unresolved_non_copyable_value [consumable_and_assignable] %stack_addr : $*M4
  %get_M4 = function_ref @get_M4 : $@convention(thin) () -> @owned M4
  %instance = apply %get_M4() : $@convention(thin) () -> @owned M4
  store %instance to [init] %stack : $*M4
  %s2_addr = struct_element_addr %stack : $*M4, #M4.s2
  %s4_addr = struct_element_addr %stack : $*M4, #M4.s4
  %replace_2 = function_ref @replace_2 : $@convention(thin) (@inout M, @inout M) -> ()
  apply %replace_2(%s2_addr, %s4_addr) : $@convention(thin) (@inout M, @inout M) -> ()
  %12 = struct_element_addr %stack : $*M4, #M4.s1
  %13 = load [copy] %12 : $*M
  %14 = struct_element_addr %stack : $*M4, #M4.s3
  %15 = load [copy] %14 : $*M
  %16 = function_ref @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
  %17 = apply %16(%13, %15) : $@convention(thin) (@owned M, @owned M) -> ()
  destroy_addr %stack : $*M4
  dealloc_stack %stack_addr : $*M4
  %22 = tuple ()
  return %22 : $()
}

// Two non-contiguous fields (#M4.s2, #M4.s4) are initialized by @get_out_2.
//
// Verify that M4.s4 is not leaked after it is set.
// CHECK-LABEL: sil [ossa] @rdar111391893 : $@convention(thin) () -> () {
// CHECK:         [[GET_OUT_2:%[^,]+]] = function_ref @get_out_2
// CHECK:         [[STACK:%[^,]+]] = alloc_stack
// CHECK:         [[S2_ADDR_1:%[^,]+]] = struct_element_addr [[STACK]]
// CHECK:         [[S4_ADDR_1:%[^,]+]] = struct_element_addr [[STACK]]
// CHECK:         apply [[GET_OUT_2]]([[S2_ADDR_1]], [[S4_ADDR_1]])
// CHECK:         [[S2_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]]
// CHECK:         [[S4_ADDR_4:%[^,]+]] = struct_element_addr [[STACK]]
// CHECK:         destroy_addr [[S2_ADDR_2]]
// CHECK:         destroy_addr [[S4_ADDR_4]]
// CHECK-LABEL: } // end sil function 'rdar111391893'
sil [ossa] @rdar111391893 : $@convention(thin) () -> () {
  %get_out_2 = function_ref @get_out_2 : $@convention(thin) () -> (@out M, @out M)
  %end_2 = function_ref @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
  %stack_addr = alloc_stack $M4
  %stack = mark_unresolved_non_copyable_value [consumable_and_assignable] %stack_addr : $*M4
  %s2_addr = struct_element_addr %stack : $*M4, #M4.s2
  %s4_addr = struct_element_addr %stack : $*M4, #M4.s4
  apply %get_out_2(%s2_addr, %s4_addr) : $@convention(thin) () -> (@out M, @out M)
  %s1_addr = struct_element_addr %stack : $*M4, #M4.s1
  %s3_addr = struct_element_addr %stack : $*M4, #M4.s3
  apply %get_out_2(%s1_addr, %s3_addr) : $@convention(thin) () -> (@out M, @out M)
  %12 = struct_element_addr %stack : $*M4, #M4.s1
  %13 = load [copy] %12 : $*M
  %14 = struct_element_addr %stack : $*M4, #M4.s3
  %15 = load [copy] %14 : $*M
  %17 = apply %end_2(%13, %15) : $@convention(thin) (@owned M, @owned M) -> ()
  destroy_addr %stack : $*M4
  dealloc_stack %stack_addr : $*M4
  %22 = tuple ()
  return %22 : $()
}

// Two non-contiguous fields (#M4.s2, #M$.s4) are consumed by @take_addr_2.
// CHECK-LABEL: sil [ossa] @consume_noncontiguous : $@convention(thin) (@in M4) -> () {
// CHECK:       bb0([[M4:%[^,]+]] :
// CHECK:         [[S1:%[^,]+]] = struct_element_addr [[M4]] : $*M4, #M4.s1
// CHECK:         [[S3:%[^,]+]] = struct_element_addr [[M4]] : $*M4, #M4.s3
// CHECK:         [[TAKE_ADDR_2:%[^,]+]] = function_ref @take_addr_2
// CHECK:         apply [[TAKE_ADDR_2]]([[S1]], [[S3]])
// CHECK-LABEL: } // end sil function 'consume_noncontiguous'
sil [ossa] @consume_noncontiguous : $@convention(thin) (@in M4) -> () {
entry(%m4_addr : $*M4):
  %m4 = mark_unresolved_non_copyable_value [consumable_and_assignable] %m4_addr : $*M4
  %s1 = struct_element_addr %m4 : $*M4, #M4.s1
  %s2 = struct_element_addr %m4 : $*M4, #M4.s2
  %s3 = struct_element_addr %m4 : $*M4, #M4.s3
  %s4 = struct_element_addr %m4 : $*M4, #M4.s4
  %take_addr_2 = function_ref @take_addr_2 : $@convention(thin) (@in M, @in M) -> ()
  apply %take_addr_2(%s1, %s3) : $@convention(thin) (@in M, @in M) -> ()
  destroy_addr %s2 : $*M
  destroy_addr %s4 : $*M
  %retval = tuple ()
  return %retval : $()
}

struct S : ~Copyable {
  var o: Builtin.NativeObject
}

// CHECK-LABEL: sil [ossa] @load_take_copyable : {{.*}} {
// CHECK:       bb0([[S:%[^,]+]] :
// CHECK:         [[O_ADDR:%[^,]+]] = struct_element_addr [[S]] : $*S, #S.o
// CHECK:         [[O:%[^,]+]] = load [take] [[O_ADDR]]
// CHECK:         [[OM:%[^,]+]] = move_value [[O]]
// CHECK:         destroy_value [[OM]]
// CHECK-LABEL: } // end sil function 'load_take_copyable'
sil [ossa] @load_take_copyable : $@convention(thin) (@in S) -> () {
bb0(%s_addr : $*S):
  %s = mark_unresolved_non_copyable_value [consumable_and_assignable] %s_addr : $*S
  %o_addr = struct_element_addr %s : $*S, #S.o
  %o = load [take] %o_addr : $*Builtin.NativeObject
  %om = move_value %o : $Builtin.NativeObject
  destroy_value %om : $Builtin.NativeObject
  %retval = tuple ()
  return %retval : $()
}
