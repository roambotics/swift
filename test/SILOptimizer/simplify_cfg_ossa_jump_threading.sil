// RUN: %target-sil-opt -test-runner -sil-infinite-jump-threading-budget %s 2>&1 

import Builtin
import Swift

class Klass {
  var val: Int
}

class AnyKlass { }

enum FakeOptional<T> {
  case some(T)
  case none
}

sil @get_klass : $@convention(thin) () -> @owned Klass

// This test is not optimized because the dest bb of the branch has a single predecessor
// CHECK-LABEL: sil [ossa] @test_simplify_switch_enum_jump_threading1 :
// CHECK: switch_enum
// CHECK-NOT: switch_enum
// CHECK-LABEL: } // end sil function 'test_simplify_switch_enum_jump_threading1'
sil [ossa] @test_simplify_switch_enum_jump_threading1 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  specify_test "simplify-cfg-try-jump-threading @instruction[1]"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb1(%1 : $FakeOptional<Klass>)

bb1(%3 : @owned $FakeOptional<Klass>):
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb3, case #FakeOptional.none!enumelt: bb2

bb2:
  br bb4

bb3(%6 : @owned $Klass):
  destroy_value %6 : $Klass
  br bb4

bb4:
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_switch_enum_jump_threading2 :
// CHECK: switch_enum
// CHECK: switch_enum
// CHECK-LABEL: } // end sil function 'test_simplify_switch_enum_jump_threading2'
sil [ossa] @test_simplify_switch_enum_jump_threading2 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  cond_br undef, bb1, bb2

bb1:
  specify_test "simplify-cfg-try-jump-threading @instruction[2]"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1 : $FakeOptional<Klass>)

bb2:
  specify_test "simplify-cfg-try-jump-threading @instruction[5]"
  destroy_value %0 : $Klass
  %2 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt
  br bb3(%2 : $FakeOptional<Klass>)

bb3(%3 : @owned $FakeOptional<Klass>):
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb5, case #FakeOptional.none!enumelt: bb4

bb4:
  br bb6

bb5(%6 : @owned $Klass):
  destroy_value %6 : $Klass
  br bb6

bb6:
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_simplify_switch_enum_jump_threading3 :
// CHECK: select_enum
// CHECK: select_enum
// CHECK-LABEL: } // end sil function 'test_simplify_switch_enum_jump_threading3'
sil [ossa] @test_simplify_switch_enum_jump_threading3 : $@convention(thin) (@owned Klass) -> Builtin.Int1 {
bb0(%0 : @owned $Klass):
  %t = integer_literal $Builtin.Int1, 1
  %f = integer_literal $Builtin.Int1, 0
  cond_br undef, bb1, bb2

bb1:
  specify_test "simplify-cfg-try-jump-threading @instruction[4]"
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1 : $FakeOptional<Klass>)

bb2:
  destroy_value %0 : $Klass
  %2 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt
  br bb3(%2 : $FakeOptional<Klass>)

bb3(%3 : @owned $FakeOptional<Klass>):
  %4 = select_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: %t, case #FakeOptional.none!enumelt: %f : $Builtin.Int1
  destroy_value %3 : $FakeOptional<Klass>
  br bb4

bb4:
  return %4 : $Builtin.Int1
}

sil [ossa] @test_jump_thread_ref_ele_loop : $@convention(thin) () -> () {
bb0:
  specify_test "simplify-cfg-try-jump-threading @instruction[3]"
  %f = function_ref @get_klass : $@convention(thin) () -> @owned Klass
  cond_br undef, bb1, bb2

bb1:
  %c1 = apply %f() : $@convention(thin) () -> @owned Klass
  br bb3(%c1 : $Klass)

bb2:
  %c2 = apply %f() : $@convention(thin) () -> @owned Klass
  br bb3(%c2 : $Klass)

bb3(%arg : @owned $Klass):
  %b = begin_borrow %arg : $Klass
  %ele = ref_element_addr %b : $Klass, #Klass.val
  br bb4

bb4:
  %addr = begin_access [read] [dynamic] %ele : $*Int
  %ld = load [trivial] %addr : $*Int
  end_access %addr : $*Int
  cond_br undef, bb4a, bb5

bb4a:
  br bb4

bb5:
  end_borrow %b : $Klass
  destroy_value %arg : $Klass
  %z = tuple ()
  return %z : $()
}

// CHECK-LABEL: sil [ossa] @test_jump_thread_checked_cast_value :
// CHECK: select_enum
// CHECK: select_enum
// CHECK-LABEL: } // end sil function 'test_jump_thread_checked_cast_value'
sil [ossa] @test_jump_thread_checked_cast_value : $@convention(thin) (@owned AnyKlass, @owned AnyKlass) -> () {
bb0(%0 : @owned $AnyKlass, %1 : @owned $AnyKlass):
  cond_br undef, bb1, bb2

bb1:
  specify_test "simplify-cfg-try-jump-threading @instruction[2]"
  %2 = copy_value %0 : $AnyKlass
  br bb6(%2 : $AnyKlass)

bb2:
  %3 = copy_value %1 : $AnyKlass
  br bb6(%3 : $AnyKlass)

bb6(%4 : @owned $AnyKlass):
  destroy_value %0 : $AnyKlass
  destroy_value %1 : $AnyKlass
  checked_cast_br AnyKlass in %4 : $AnyKlass to Klass, bb7, bb8

bb7(%k : @owned $Klass):
  destroy_value %k : $Klass
  br bb9

bb8(%fail : @owned $AnyKlass):
  destroy_value %fail : $AnyKlass
  br bb9

bb9:
  %999 = tuple ()
  return %999 : $()
}
