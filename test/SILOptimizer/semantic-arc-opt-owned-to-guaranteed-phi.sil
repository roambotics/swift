// RUN: %target-sil-opt -semantic-arc-opts %s | %FileCheck %s

class Klass {}

// CHECK-LABEL: sil [ossa] @test_owned_to_guaranteed1 :
// CHECK-NOT: copy_value 
// CHECK-LABEL: } // end sil function 'test_owned_to_guaranteed1'
sil [ossa] @test_owned_to_guaranteed1 : $@convention(thin) (@guaranteed Klass, @guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass, %1 : @guaranteed $Klass):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $Klass
  br bb3(%copy1 : $Klass)

bb2:
  %copy2 = copy_value %1 : $Klass
  br bb3(%copy2 : $Klass)

bb3(%copy : @owned $Klass):
  destroy_value %copy : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_owned_to_guaranteed2 :
// CHECK: bb3([[ARG1:%.*]] : @owned $Klass, [[ARG2:%.*]] : @reborrow @guaranteed $Klass)
// CHECK-LABEL: } // end sil function 'test_owned_to_guaranteed2'
sil [ossa] @test_owned_to_guaranteed2 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $Klass
  %copy1 = copy_value %borrow1 : $Klass
  br bb3(%copy1 : $Klass, %borrow1 : $Klass)

bb2:
  %borrow2 = begin_borrow %1 : $Klass
  %copy2 = copy_value %borrow2 : $Klass
  br bb3(%copy2 : $Klass, %borrow2 : $Klass)

bb3(%copy : @owned $Klass, %borrow : @guaranteed $Klass):
  destroy_value %copy : $Klass
  end_borrow %borrow : $Klass
  destroy_value %0 : $Klass
  destroy_value %1 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_owned_to_guaranteed3 :
// CHECK: bb3([[ARG1:%.*]] : @owned $Klass)
// CHECK-LABEL: } // end sil function 'test_owned_to_guaranteed3'
sil [ossa] @test_owned_to_guaranteed3 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  %borrow1 = begin_borrow %0 : $Klass
  %borrow2 = begin_borrow %1 : $Klass
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %borrow1 : $Klass
  br bb3(%copy1 : $Klass)

bb2:
  %copy2 = copy_value %borrow2 : $Klass
  br bb3(%copy2 : $Klass)

bb3(%copy : @owned $Klass):
  destroy_value %copy : $Klass
  end_borrow %borrow1 : $Klass
  end_borrow %borrow2 : $Klass
  destroy_value %0 : $Klass
  destroy_value %1 : $Klass
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil [ossa] @test_owned_to_guaranteed4 :
// CHECK: bb3([[ARG1:%.*]] : @owned $Klass)
// CHECK-LABEL: } // end sil function 'test_owned_to_guaranteed4'
sil [ossa] @test_owned_to_guaranteed4 : $@convention(thin) (@in Klass) -> () {
bb0(%0 : $*Klass):
  %borrow = load_borrow %0 : $*Klass
  %copy = copy_value %borrow : $Klass
  cond_br undef, bb1, bb2

bb1:
  destroy_value %copy : $Klass
  br bb4

bb2:
  br bb3(%copy : $Klass)

bb3(%arg : @owned $Klass):
  destroy_value %arg : $Klass
  end_borrow %borrow : $Klass
  br bbret

bb4:
  end_borrow %borrow : $Klass
  br bbret

bbret:
  destroy_addr %0 : $*Klass
  %t = tuple ()
  return %t : $()
}
