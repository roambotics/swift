// RUN: %target-sil-opt -test-runner %s -o /dev/null 2>&1 | %FileCheck %s

struct MOS : ~Copyable {}

sil @getMOS : $() -> (@owned MOS)
sil @barrier : $() -> ()

// CHECK-LABEL: begin running test {{.*}} on dontDeleteDeadMoveOnlyValue
// CHECK:       Deleting-if-dead {{.*}} move_value
// CHECK:       deleteIfDead returned 0
// CHECK-LABEL: sil [ossa] @dontDeleteDeadMoveOnlyValue : {{.*}} {
// CHECK:         [[GET:%[^,]+]] = function_ref @getMOS
// CHECK:         [[BARRIER:%[^,]+]] = function_ref @barrier
// CHECK:         [[MOS:%[^,]+]] = apply [[GET]]()
// CHECK:         [[MOV:%[^,]+]] = move_value [[MOS]]
// CHECK:         apply [[BARRIER]]()
// CHECK:         destroy_value [[MOV]]
// CHECK-LABEL: } // end sil function 'dontDeleteDeadMoveOnlyValue'
// CHECK-LABEL: end running test {{.*}} on dontDeleteDeadMoveOnlyValue
sil [ossa] @dontDeleteDeadMoveOnlyValue : $() -> () {
  %get = function_ref @getMOS : $@convention(thin) () -> (@owned MOS)
  %barrier = function_ref @barrier : $@convention(thin) () -> ()
  %mos = apply %get() : $@convention(thin) () -> (@owned MOS)
  specify_test "deleter-delete-if-dead @instruction"
  %mov = move_value %mos : $MOS
  apply %barrier() : $@convention(thin) () -> ()
  destroy_value %mov : $MOS
  %retval = tuple ()
  return %retval : $()
}
