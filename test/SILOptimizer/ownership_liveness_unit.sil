// RUN: %target-sil-opt -test-runner %s -o /dev/null 2>&1 | %FileCheck %s
//
// TODO: when complete lifetime verification become the default for SIL verification,
// then consider moving all tests with 'unreachable' into a separate file with the flag
// -disable-ownership-verification

// REQUIRES: swift_in_compiler

sil_stage canonical

import Builtin

struct NCInt : ~Copyable {
  var i: Builtin.Int64
  deinit {}
}

enum FakeOptional<T> {
case none
case some(T)
}

class C {}
class D {
  var object: C
}

struct PairC {
  var first: C
  var second: C
}

sil @getC : $@convention(thin) () -> @owned C

// =============================================================================
// LinearLiveness
// =============================================================================

// CHECK-LABEL: testLinearRefElementEscape: linear-liveness with: %borrow
// CHECK-LABEL: Linear liveness:
// CHECK: lifetime-ending user:
// CHECK-SAME: end_borrow
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: testLinearRefElementEscape

// CHECK-LABEL: testLinearRefElementEscape: linear_liveness_swift with: %borrow
// CHECK: Linear liveness:
// CHECK-NEXT: Live blocks:
// CHECK-NEXT: begin: %{{.*}} = begin_borrow
// CHECK-NEXT: ends: end_borrow
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:
// CHECK-NEXT: last user: end_borrow
// CHECK-NEXT: testLinearRefElementEscape
sil [ossa] @testLinearRefElementEscape : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow = begin_borrow %0 : $C
  specify_test "linear-liveness %borrow"
  specify_test "linear_liveness_swift %borrow"
  cond_br undef, bb1, bb2

bb1:
  %d1 = unchecked_ref_cast %0 : $C to $D
  %f1 = ref_element_addr %d1 : $D, #D.object
  %p1 = address_to_pointer %f1 : $*C to $Builtin.RawPointer
  br bb3(%d1 : $D)
  
bb2:
  %d2 = unchecked_ref_cast %0 : $C to $D
  %f2 = ref_element_addr %d2 : $D, #D.object  
  %p2 = address_to_pointer %f2 : $*C to $Builtin.RawPointer
  br bb3(%d2 : $D)

bb3(%phi : @guaranteed $D):
  end_borrow %borrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testLinearBitwiseEscape: linear-liveness with: %borrow
// CHECK: Linear liveness:
// CHECK: lifetime-ending user:
// CHECK-SAME: end_borrow
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: testLinearBitwiseEscape

// CHECK-LABEL: testLinearBitwiseEscape: linear_liveness_swift with: %borrow
// CHECK: Linear liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: Live blocks:
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       end_borrow
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: testLinearBitwiseEscape
sil [ossa] @testLinearBitwiseEscape : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow = begin_borrow %0 : $C
  specify_test "linear-liveness %borrow"
  specify_test "linear_liveness_swift %borrow"
  cond_br undef, bb1, bb2

bb1:
  %d1 = unchecked_bitwise_cast %0 : $C to $D
  br bb3(%d1 : $D)
  
bb2:
  %d2 = unchecked_bitwise_cast %0 : $C to $D
  br bb3(%d2 : $D)

bb3(%phi : @unowned $D):
  end_borrow %borrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testLinearInnerReborrow: linear-liveness with: @argument[0]
// CHECK: Linear liveness:
// CHECK: lifetime-ending user:
// CHECK-SAME: destroy_value %0
// CHECK-NEXT: last user:   destroy_value %0
// CHECK-NEXT: testLinearInnerReborrow

// CHECK-LABEL: testLinearInnerReborrow: linear_liveness_swift with: @argument[0]
// CHECK: Linear liveness:
// CHECK-NEXT: Live blocks:
// CHECK-NEXT: begin:      cond_br undef, bb1, bb2
// CHECK-NEXT: ends:       destroy_value %0 : $C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: last user:   destroy_value %0 : $C
// CHECK-NEXT: testLinearInnerReborrow
sil [ossa] @testLinearInnerReborrow : $@convention(thin) (@owned C) -> () {
bb0(%0 : @owned $C):
  specify_test "linear-liveness @argument[0]"
  specify_test "linear_liveness_swift @argument[0]"
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $C
  br bb3(%borrow1 : $C)
  
bb2:
  %borrow2 = begin_borrow %0 : $C
  br bb3(%borrow2 : $C)

bb3(%phi : @guaranteed $C):
  end_borrow %phi : $C
  destroy_value %0 : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testLinearAdjacentReborrow: linear-liveness with: %borrow
// CHECK: lifetime-ending user:
// CHECK-SAME: br bb3
// CHECK-NEXT: lifetime-ending user: br bb3
// CHECK-NEXT: last user: br bb3
// CHECK-NEXT: last user: br bb3
// CHECK-NEXT: testLinearAdjacentReborrow

// CHECK-LABEL: testLinearAdjacentReborrow: linear_liveness_swift with: %borrow
// CHECK: Live blocks:
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       br bb3
// CHECK-NEXT:             br bb3
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: last user:   br bb3
// CHECK-NEXT: last user:   br bb3
// CHECK-NEXT: testLinearAdjacentReborrow
sil [ossa] @testLinearAdjacentReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "linear-liveness %borrow"
  specify_test "linear_liveness_swift %borrow"
  %borrow = begin_borrow %0 : $C
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %borrow : $C
  br bb3(%borrow : $C, %borrow1 : $C)
  
bb2:
  %borrow2 = begin_borrow %borrow : $C
  br bb3(%borrow : $C, %borrow2 : $C)

bb3(%outer : @guaranteed $C, %inner : @guaranteed $C):
  end_borrow %inner : $C
  end_borrow %outer : $C
  %99 = tuple()
  return %99 : $()
}

// =============================================================================
// visitInnerAdjacentPhis
// =============================================================================

// CHECK-LABEL: pay_the_phi: visit-inner-adjacent-phis with: %owned
// CHECK: sil [ossa] @pay_the_phi : {{.*}} {
// CHECK:   [[C:%[^,]+]] = apply
// CHECK:   [[BORROW1:%[^,]+]] = begin_borrow %1
// CHECK:   [[BORROW2:%[^,]+]] = begin_borrow %1
// CHECK:   br [[EXIT:bb[0-9]+]]([[C]] : $C, [[BORROW1]] : $C, [[BORROW2]] :
// CHECK: [[EXIT]]({{%[^,]+}} : @owned $C, [[GUARANTEED1:%[^,]+]] : @reborrow @guaranteed $C, [[GUARANTEED2:%[^,]+]] :
// CHECK: } // end sil function 'pay_the_phi'
//
// CHECK:[[GUARANTEED1]] = argument of [[EXIT]]
// CHECK:[[GUARANTEED2]] = argument of [[EXIT]]
// CHECK-LABEL: pay_the_phi: visit-inner-adjacent-phis with: %owned
sil [ossa] @pay_the_phi : $@convention(thin) () -> () {
entry:
  %getC = function_ref @getC : $@convention(thin) () -> @owned C
  %c = apply %getC() : $@convention(thin) () -> @owned C
  %borrow1 = begin_borrow %c : $C
  %borrow2 = begin_borrow %c : $C
  %borrow3 = begin_borrow %borrow2 : $C
  br exit(%c : $C, %borrow1 : $C, %borrow2 : $C, %borrow3 : $C)

exit(%owned : @owned $C, %guaranteed_1 : @guaranteed $C, %guaranteed_2 : @guaranteed $C, %guaranteed_3 : @guaranteed $C):
  specify_test "visit-inner-adjacent-phis %owned"
  end_borrow %guaranteed_3 : $C
  end_borrow %guaranteed_2 : $C
  end_borrow %guaranteed_1 : $C
  destroy_value %owned : $C
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: pay_the_phi_forward: visit-inner-adjacent-phis with: %reborrow
// CHECK: bb1(%{{.*}} : @reborrow @guaranteed $C, [[INNER:%.*]] : @guaranteed $D):    // Preds: bb0
// CHECK: } // end sil function 'pay_the_phi_forward'
// CHECK: [[INNER]] = argument of bb1 : $D
// CHECK: pay_the_phi_forward: visit-inner-adjacent-phis with: %reborrow
sil [ossa] @pay_the_phi_forward : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow0 = begin_borrow %0 : $C
  %d0 = unchecked_ref_cast %borrow0 : $C to $D
  br exit(%borrow0 : $C, %d0 : $D)

exit(%reborrow : @guaranteed $C, %phi : @guaranteed $D):
  specify_test "visit-inner-adjacent-phis %reborrow"
  %f = ref_element_addr %phi : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %reborrow : $C
  %retval = tuple ()
  return %retval : $()
}

// =============================================================================
// InteriorLiveness
// =============================================================================

// CHECK-LABEL: testInteriorRefElementEscape: interior-liveness with: %0
// CHECK: Incomplete liveness: Escaping address
// CHECK: last user:   %{{.*}} = address_to_pointer
// CHECK-NEXT: testInteriorRefElementEscape:

// CHECK-LABEL: testInteriorRefElementEscape: interior_liveness_swift with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $C
// CHECK-NEXT: Pointer escape:   %{{.*}} = address_to_pointer %{{.*}} : $*C to $Builtin.RawPointer
// CHECK-NEXT: begin:      %{{.*}} = unchecked_ref_cast %0 : $C to $D
// CHECK-NEXT: ends:       %{{.*}} = address_to_pointer %{{.*}} : $*C to $Builtin.RawPointer
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  %{{.*}} = ref_element_addr %{{.*}} : $D, #D.object
// CHECK-NEXT:             %{{.*}} = unchecked_ref_cast %0 : $C to $D
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = address_to_pointer %{{.*}} : $*C to $Builtin.RawPointer
// CHECK-NEXT: testInteriorRefElementEscape:
sil [ossa] @testInteriorRefElementEscape : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness %0"
  specify_test "interior_liveness_swift %0"
  %d = unchecked_ref_cast %0 : $C to $D
  %f1 = ref_element_addr %d : $D, #D.object  
  %p1 = address_to_pointer %f1 : $*C to $Builtin.RawPointer
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInteriorUnconditionalAddrCast: interior-liveness with: %1
// CHECK: Interior liveness: %1 = argument of bb0 : $D
// CHECK-NEXT: bb0: LiveWithin
// CHECK-NEXT: regular user:   [[FIELD:%.*]] = ref_element_addr %1 : $D, #D.object
// CHECK-NEXT: regular user:   unconditional_checked_cast_addr C in [[FIELD]] : $*C to D in %0 : $*D
// CHECK-NEXT: regular user:   copy_addr [take] %4 to [init] [[FIELD]] : $*C
// CHECK-NEXT: regular user:   unchecked_ref_cast_addr  C in [[FIELD]] : $*C to D in %0 : $*D
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   unchecked_ref_cast_addr  C in [[FIELD]] : $*C to D in %0 : $*D
// CHECK-NEXT: testInteriorUnconditionalAddrCast: interior-liveness with: %1

// CHECK-LABEL: testInteriorUnconditionalAddrCast: interior_liveness_swift with: %1
// CHECK: Interior liveness: %1 = argument of bb0 : $D
// CHECK-NEXT: begin:      [[FIELD]] = ref_element_addr %1 : $D, #D.object
// CHECK-NEXT: ends:       unchecked_ref_cast_addr  C in [[FIELD]] : $*C to D in %0 : $*D
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:  copy_addr [take] %4 to [init] [[FIELD]] : $*C
// CHECK-NEXT:             unconditional_checked_cast_addr C in [[FIELD]] : $*C to D in %0 : $*D
// CHECK-NEXT:             [[FIELD]] = ref_element_addr %1 : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   unchecked_ref_cast_addr  C in [[FIELD]] : $*C to D in %0 : $*D
// CHECK-NEXT: testInteriorUnconditionalAddrCast: interior_liveness_swift with: %1
sil [ossa] @testInteriorUnconditionalAddrCast : $@convention(thin) (@guaranteed D) -> @out D {
bb0(%0 : $*D, %1 : @guaranteed $D):
  specify_test "interior-liveness %1"
  specify_test "interior_liveness_swift %1"
  %c1 = ref_element_addr %1 : $D, #D.object
  unconditional_checked_cast_addr C in %c1 : $*C to D in %0 : $*D
  %c2 = unchecked_addr_cast %0 : $*D to $*C
  copy_addr [take] %c2 to [init] %c1 : $*C
  unchecked_ref_cast_addr C in %c1 : $*C to D in %0 : $*D
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 2 on testInteriorDropDeinit: interior-liveness with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $NCInt
// CHECK-NEXT: bb0: LiveWithin
// CHECK-NEXT: lifetime-ending user:   [[DD:%.*]] = drop_deinit %0 : $NCInt
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   [[DD]] = drop_deinit %0 : $NCInt
// CHECK-LABEL: end running test 1 of 2 on testInteriorDropDeinit: interior-liveness with: %0

// CHECK-LABEL: begin running test 2 of 2 on testInteriorDropDeinit: interior_liveness_swift with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $NCInt
// CHECK-NEXT: begin:      [[DD:%.*]] = drop_deinit %0 : $NCInt
// CHECK-NEXT: ends:       [[DD]] = drop_deinit %0 : $NCInt
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   [[DD]] = drop_deinit %0 : $NCInt
// CHECK-LABEL: end running test 2 of 2 on testInteriorDropDeinit: interior_liveness_swift with: %0
sil [ossa] @testInteriorDropDeinit : $@convention(thin) (@owned NCInt) -> () {
bb0(%0 : @owned $NCInt):
  specify_test "interior-liveness %0"
  specify_test "interior_liveness_swift %0"
  %nd = drop_deinit %0 : $NCInt
  destroy_value %nd : $NCInt
  %99 = tuple()
  return %99 : $()
}

// =============================================================================
// InteriorLiveness and visitAdjacentPhis
// =============================================================================

// CHECK-LABEL: testInteriorReborrow: interior-liveness with: %borrow
// CHECK: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb1
// CHECK-NEXT: testInteriorReborrow: interior-liveness with: %borrow

// CHECK-LABEL: testInteriorReborrow: interior_liveness_swift with: %borrow
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       br bb1(%{{.*}} : $C)
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb1(%{{.*}} : $C)
// CHECK-NEXT: testInteriorReborrow: interior_liveness_swift with: %borrow
sil [ossa] @testInteriorReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow = begin_borrow %0 : $C
  specify_test "interior-liveness %borrow"
  specify_test "interior_liveness_swift %borrow"
  br bb1(%borrow : $C)

bb1(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInteriorNondominatedReborrow: interior-liveness with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: Inner scope:   %{{.*}} = begin_borrow %{{.*}} : $D
// CHECK-NEXT: bb0: LiveWithin
// CHECK-NEXT: regular user:   br bb1(%{{.*}} : $C, %{{.*}} : $D)
// CHECK-NEXT: regular user:   %{{.*}} = unchecked_ref_cast %{{.*}} : $C to $D
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb1(%{{.*}} : $C, %{{.*}} : $D)
// CHECK-NEXT: testInteriorNondominatedReborrow: interior-liveness with: %borrow1

// CHECK-LABEL: testInteriorNondominatedReborrow: interior_liveness_swift with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       br bb1(%{{.*}} : $C, %{{.*}} : $D)
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:  %{{.*}} = unchecked_ref_cast %{{.*}} : $C to $D
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb1(%{{.*}} : $C, %{{.*}} : $D)
// CHECK-NEXT: testInteriorNondominatedReborrow: interior_liveness_swift with: %borrow1
sil [ossa] @testInteriorNondominatedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow1 = begin_borrow %0 : $C
  specify_test "interior-liveness %borrow1"
  specify_test "interior_liveness_swift %borrow1"
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  %borrow2 = begin_borrow %d1 : $D
  br bb3(%borrow1 : $C, %borrow2 : $D)
 
bb3(%reborrow1 : @guaranteed $C, %reborrow2 : @guaranteed $D):
  end_borrow %reborrow2 : $D
  end_borrow %reborrow1 : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInteriorDominatedReborrow: interior-liveness with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: Inner scope:   %{{.*}} = begin_borrow %{{.*}} : $D
// CHECK-NEXT: Inner scope: %{{.*}} = argument of bb1 : $D
// CHECK-NEXT: bb0: LiveOut
// CHECK-NEXT: bb1: LiveWithin
// CHECK-NEXT: lifetime-ending user:   end_borrow %{{.*}} : $C
// CHECK-NEXT: regular user:   %{{.*}} = unchecked_ref_cast %{{.*}} : $C to $D
// CHECK-NEXT: regular user:   end_borrow %{{.*}} : $D
// CHECK-NEXT: regular user:   br bb1(%{{.*}} : $D)
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %1 : $C                              // id: %7
// CHECK-NEXT: testInteriorDominatedReborrow: interior-liveness with: %borrow1

// CHECK-LABEL: testInteriorDominatedReborrow: interior_liveness_swift with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       end_borrow %{{.*}} : $C
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:  end_borrow %{{.*}} : $D
// CHECK-NEXT:             br bb1(%{{.*}} : $D)
// CHECK-NEXT:             %{{.*}} = unchecked_ref_cast %{{.*}} : $C to $D
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %{{.*}} : $C
// CHECK-NEXT: testInteriorDominatedReborrow: interior_liveness_swift with: %borrow1
sil [ossa] @testInteriorDominatedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow1 = begin_borrow %0 : $C
  specify_test "interior-liveness %borrow1"
  specify_test "interior_liveness_swift %borrow1"
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  %borrow2 = begin_borrow %d1 : $D
  br bb3(%borrow2 : $D)
 
bb3(%reborrow2 : @guaranteed $D):
  end_borrow %reborrow2 : $D
  end_borrow %borrow1 : $C
  %99 = tuple()
  return %99 : $()
}

// Test mark_dependence of an address value. Walk down.

// CHECK-LABEL: testInteriorMarkDepAddressValue: interior-liveness with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: bb0: LiveWithin
// CHECK-NEXT: regular user:   %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: regular user:   end_borrow %{{.*}} : $C
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %{{.*}} : $C
// CHECK-NEXT: testInteriorMarkDepAddressValue: interior-liveness with: %0

// CHECK-LABEL: testInteriorMarkDepAddressValue: interior_liveness_swift with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: begin:      %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: ends:       end_borrow %{{.*}} : $C
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:  %{{.*}} = load_borrow %{{.*}} : $*C
// CHECK-NEXT:             %{{.*}} = mark_dependence %{{.*}} : $*C on %{{.*}} : $C
// CHECK-NEXT:             %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %{{.*}} : $C
// CHECK-LABEL: testInteriorMarkDepAddressValue: interior_liveness_swift with: %0
sil [ossa] @testInteriorMarkDepAddressValue : $@convention(thin) (@guaranteed D, @guaranteed C) -> () {
bb0(%0 : @guaranteed $D, %1 : @guaranteed $C):
  specify_test "interior-liveness %0"
  specify_test "interior_liveness_swift %0"
  %f = ref_element_addr %0 : $D, #D.object
  %dependence = mark_dependence %f: $*C on %1: $C
  %load = load_borrow %dependence : $*C
  end_borrow %load : $C
  %99 = tuple()
  return %99 : $()
}

// Test mark_dependence on a base address value. Walk down.

// CHECK-LABEL: testInteriorMarkDepAddressBase: interior-liveness with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: bb0: LiveWithin
// CHECK-NEXT: regular user:   %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: regular user:   %{{.*}} = mark_dependence %{{.*}} : $*C on %{{.*}} : $*C
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = mark_dependence %{{.*}} : $*C on %{{.*}} : $*C
// CHECK-NEXT: testInteriorMarkDepAddressBase: interior-liveness with: %0

// CHECK-LABEL: testInteriorMarkDepAddressBase: interior_liveness_swift with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: begin:      %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: ends:       end_borrow %{{.*}} : $C
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:  %{{.*}} = load_borrow %{{.*}} : $*C
// CHECK-NEXT:             %{{.*}} = mark_dependence %{{.*}} : $*C on %{{.*}} : $*C
// CHECK-NEXT:             %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %{{.*}} : $C
// CHECK-NEXT: testInteriorMarkDepAddressBase: interior_liveness_swift with: %0
sil [ossa] @testInteriorMarkDepAddressBase : $@convention(thin) (@guaranteed D, @guaranteed D) -> () {
bb0(%0 : @guaranteed $D, %1 : @guaranteed $D):
  specify_test "interior-liveness %0"
  specify_test "interior_liveness_swift %0"
  %f0 = ref_element_addr %0 : $D, #D.object
  %f1 = ref_element_addr %1 : $D, #D.object
  %dependence = mark_dependence %f1: $*C on %f0: $*C
  %load = load_borrow %dependence : $*C
  end_borrow %load : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInteriorMarkDepAddressDependent: interior-liveness with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: bb0: LiveWithin
// CHECK-NEXT: regular user:   %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: regular user:   %{{.*}} = mark_dependence [nonescaping] %{{.*}} : $C on %{{.*}} : $*C
// CHECK-NEXT: regular user:   end_access %{{.*}} : $*C
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_access %{{.*}} : $*C
// CHECK-NEXT: testInteriorMarkDepAddressDependent: interior-liveness with: %0

// CHECK-LABEL: testInteriorMarkDepAddressDependent: interior_liveness_swift with: %0
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: begin:      %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: ends:       end_access %{{.*}} : $*C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  %{{.*}} = begin_access [read] [static] %{{.*}} : $*C
// CHECK-NEXT:             %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_access %{{.*}} : $*C
// CHECK-NEXT: testInteriorMarkDepAddressDependent: interior_liveness_swift with: %0
sil [ossa] @testInteriorMarkDepAddressDependent : $@convention(thin) (@guaranteed D, @owned C) -> () {
bb0(%0 : @guaranteed $D, %1 : @owned $C):
  specify_test "interior-liveness %0"
  specify_test "interior_liveness_swift %0"
  %f = ref_element_addr %0 : $D, #D.object
  %access = begin_access [read] [static] %f : $*C
  %dependence = mark_dependence [nonescaping] %1: $C on %access: $*C
  %stack = alloc_stack $C
  %sb = store_borrow %dependence to %stack : $*C
  end_borrow %sb : $*C
  destroy_value %dependence : $C
  end_access %access : $*C
  dealloc_stack %stack : $*C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInteriorDominatedGuaranteedForwardingPhi: interior-liveness with: @argument[0]
// CHECK: Complete liveness
// CHECK: last user: %{{.*}} load [copy]
// CHECK-NEXT: testInteriorDominatedGuaranteedForwardingPhi:

// CHECK-LABEL: testInteriorDominatedGuaranteedForwardingPhi: interior_liveness_swift with: @argument[0]
// CHECK: Interior liveness: %0 = argument of bb0 : $C
// CHECK-NEXT: begin:      cond_br undef, bb1, bb2
// CHECK-NEXT: ends:       %{{.*}} = load [copy] %{{.*}} : $*C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  br bb3(%{{.*}} : $D)
// CHECK-NEXT:             %{{.*}} = unchecked_ref_cast %0 : $C to $D
// CHECK-NEXT:             %{{.*}} = ref_element_addr %{{.*}} : $D, #D.object
// CHECK-NEXT:             br bb3(%{{.*}} : $D)
// CHECK-NEXT:             %{{.*}} = unchecked_ref_cast %0 : $C to $D
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy] %{{.*}} : $*C
// CHECK-NEXT: testInteriorDominatedGuaranteedForwardingPhi:
sil [ossa] @testInteriorDominatedGuaranteedForwardingPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness @argument[0]"
  specify_test "interior_liveness_swift @argument[0]"
  cond_br undef, bb1, bb2

bb1:
  %d1 = unchecked_ref_cast %0 : $C to $D
  br bb3(%d1 : $D)

bb2:
  %d2 = unchecked_ref_cast %0 : $C to $D
  br bb3(%d2 : $D)

bb3(%phi : @guaranteed $D):
  %f = ref_element_addr %phi : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInteriorNondominatedGuaranteedForwardingPhi: interior-liveness with: %borrow1
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(
// CHECK-NEXT: testInteriorNondominatedGuaranteedForwardingPhi: interior-liveness with: %borrow1

// CHECK-LABEL: testInteriorNondominatedGuaranteedForwardingPhi: interior_liveness_swift with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       br bb3(%{{.*}} : $C, %{{.*}} : $D)
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  %{{.*}} = unchecked_ref_cast %{{.*}} : $C to $D
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(%{{.*}} : $C, %{{.*}} : $D)
// CHECK-NEXT: testInteriorNondominatedGuaranteedForwardingPhi: interior_liveness_swift with: %borrow1
sil [ossa] @testInteriorNondominatedGuaranteedForwardingPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $C
  specify_test "interior-liveness %borrow1"
  specify_test "interior_liveness_swift %borrow1"
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  br bb3(%borrow1 : $C, %d1 : $D)
 
bb2:
  %borrow2 = begin_borrow %0 : $C
  %d2 = unchecked_ref_cast %borrow2 : $C to $D
  br bb3(%borrow2 : $C, %d2 : $D)

bb3(%reborrow : @guaranteed $C, %phi : @guaranteed $D):
  %f = ref_element_addr %phi : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %reborrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInnerDominatedReborrow: interior-liveness with: @argument[0]
// CHECK: Interior liveness:
// CHECK: Inner scope:   %{{.*}} = begin_borrow %0 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: testInnerDominatedReborrow: interior-liveness with: @argument[0]

// CHECK-LABEL: testInnerDominatedReborrow: interior_liveness_swift with: @argument[0]
// CHECK: Interior liveness: %0 = argument of bb0 : $C
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $C
// CHECK-NEXT: ends:       end_borrow %{{.*}} : $C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  br bb1(%{{.*}} : $C)
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %{{.*}} : $C
// CHECK-NEXT: testInnerDominatedReborrow: interior_liveness_swift with: @argument[0]
sil [ossa] @testInnerDominatedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness @argument[0]"
  specify_test "interior_liveness_swift @argument[0]"
  %borrow = begin_borrow %0 : $C
  br bb1(%borrow : $C)

bb1(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInnerDominatedReborrow2: interior-liveness with: %copy0a
// CHECK: Inner scope:   %{{.*}} = begin_borrow %1 : $C
// CHECK-NEXT: Inner scope: %{{.*}} = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   destroy_value
// CHECK-NEXT: testInnerDominatedReborrow2: interior-liveness with: %copy0a

// CHECK-LABEL: testInnerDominatedReborrow2: interior_liveness_swift with: %copy0a
// CHECK: Interior liveness:   %{{.*}} = copy_value %0 : $C
// CHECK-NEXT: begin:      %{{.*}} = copy_value %0 : $C
// CHECK-NEXT: ends:       destroy_value %{{.*}} : $C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  end_borrow %{{.*}} : $C
// CHECK-NEXT:             br bb3(%{{.*}} : $C)
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   destroy_value %{{.*}} : $C
// CHECK-NEXT: testInnerDominatedReborrow2: interior_liveness_swift with: %copy0a
sil [ossa] @testInnerDominatedReborrow2 : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %copy0a = copy_value %0 : $C
  %copy0b = copy_value %0 : $C
  specify_test "interior-liveness %copy0a"
  specify_test "interior_liveness_swift %copy0a"
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %copy0a : $C
  br bb3(%borrow1 : $C)

bb2:
  %borrow2 = begin_borrow %copy0b : $C
  br bb3(%borrow2 : $C)

bb3(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  destroy_value %copy0a : $C
  destroy_value %copy0b : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInnerNonDominatedReborrow: interior-liveness with: %borrow1
// CHECK: Inner scope:   [[BORROW:%.*]] = begin_borrow [[DEF:%.*]] : $D
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3([[DEF]] : $D, [[BORROW]] : $D)
// CHECK-NEXT: testInnerNonDominatedReborrow: interior-liveness with: %borrow1

// CHECK-LABEL: testInnerNonDominatedReborrow: interior_liveness_swift with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %0 : $D
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %0 : $D
// CHECK-NEXT: ends:       br bb3(%{{.*}} : $D, %{{.*}} : $D)
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(%{{.*}} : $D, %{{.*}} : $D)
// CHECK-NEXT: testInnerNonDominatedReborrow: interior_liveness_swift with: %borrow1
sil [ossa] @testInnerNonDominatedReborrow : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $D
  specify_test "interior-liveness %borrow1"
  specify_test "interior_liveness_swift %borrow1"
  %inner1 = begin_borrow %borrow1 : $D
  br bb3(%borrow1 : $D, %inner1 : $D)

bb2:
  %borrow2 = begin_borrow %0 : $D
  %inner2 = begin_borrow %borrow2 : $D
  br bb3(%borrow2 : $D, %inner2 : $D)

bb3(%outer : @guaranteed $D, %inner : @guaranteed $D):
  %f = ref_element_addr %inner : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner : $D
  end_borrow %outer : $D
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testInnerAdjacentReborrow1: interior-liveness with: %outer3
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb4 : $D
// CHECK:      regular user:   end_borrow
// CHECK-NEXT: regular user:   br bb4(
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user: end_borrow
// CHECK-NEXT: testInnerAdjacentReborrow1: interior-liveness with: %outer3

// CHECK-LABEL: testInnerAdjacentReborrow1: interior_liveness_swift with: %outer3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $D
// CHECK-NEXT: begin:      br bb4(
// CHECK-NEXT: ends:       end_borrow
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  br bb4(
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: testInnerAdjacentReborrow1: interior_liveness_swift with: %outer3
sil [ossa] @testInnerAdjacentReborrow1 : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $D
  %borrow1 = begin_borrow %copy1 : $D
  br bb3(%copy1 : $D, %borrow1 : $D)

bb2:
  %copy2 = copy_value %0 : $D
  %borrow2 = begin_borrow %0 : $D
  br bb3(%copy2 : $D, %borrow2 : $D)

bb3(%outer3 : @owned $D, %inner3 : @guaranteed $D):
  specify_test "interior-liveness %outer3"
  specify_test "interior_liveness_swift %outer3"
  br bb4(%inner3 : $D)

bb4(%inner4 : @guaranteed $D):
  %f = ref_element_addr %inner4 : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner4 : $D
  unreachable
}

// CHECK-LABEL: testInnerAdjacentReborrow2: interior-liveness with: %outer3
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb4 : $D
// CHECK:      regular user:   end_borrow
// CHECK-NEXT: regular user:   br bb4(
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user: end_borrow
// CHECK-NEXT: testInnerAdjacentReborrow2: interior-liveness with: %outer3

// CHECK-LABEL: testInnerAdjacentReborrow2: interior_liveness_swift with: %outer3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $D
// CHECK-NEXT: begin:      br bb4(%{{.*}} : $D)
// CHECK-NEXT: ends:       end_borrow %{{.*}} : $D
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  br bb4(%{{.*}} : $D)
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow %{{.*}} : $D
// CHECK-NEXT: testInnerAdjacentReborrow2: interior_liveness_swift with: %outer3
sil [ossa] @testInnerAdjacentReborrow2 : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $D
  %borrow1 = begin_borrow %copy1 : $D
  br bb3(%copy1 : $D, %borrow1 : $D)

bb2:
  %copy2 = copy_value %0 : $D
  %borrow2 = begin_borrow %0 : $D
  br bb3(%copy2 : $D, %borrow2 : $D)

bb3(%outer3 : @owned $D, %inner3 : @guaranteed $D):
  specify_test "interior-liveness %outer3"
  specify_test "interior_liveness_swift %outer3"
  br bb4(%inner3 : $D)

bb4(%inner4 : @guaranteed $D):
  %f = ref_element_addr %inner4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner4 : $D
  unreachable
}

// CHECK-LABEL: testInnerNonAdjacentReborrow: interior-liveness with: %outer3
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $D
// CHECK-NOT:  Inner scope
// CHECK-NOT:  lifetime-ending user
// CHECK:      Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: dead def: [[DEF]] = argument of bb3 : $D
// CHECK-NEXT: testInnerNonAdjacentReborrow: interior-liveness with: %outer3

// CHECK-LABEL: testInnerNonAdjacentReborrow: interior_liveness_swift with: %outer3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $D
// CHECK-NEXT: begin:      br bb4(%{{.*}} : $D)
// CHECK-NEXT: ends:
// CHECK-NEXT: exits:
// CHECK-NEXT: interiors:
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: dead def:    %{{.*}} = argument of bb3 : $D
// CHECK-NEXT: testInnerNonAdjacentReborrow: interior_liveness_swift with: %outer3
sil [ossa] @testInnerNonAdjacentReborrow : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $D
  %borrow1 = begin_borrow %0 : $D
  br bb3(%copy1 : $D, %borrow1 : $D)

bb2:
  %copy2 = copy_value %0 : $D
  %borrow2 = begin_borrow %0 : $D
  br bb3(%copy2 : $D, %borrow2 : $D)

bb3(%outer3 : @owned $D, %inner3 : @guaranteed $D):
  specify_test "interior-liveness %outer3"
  specify_test "interior_liveness_swift %outer3"
  br bb4(%inner3 : $D)

bb4(%inner4 : @guaranteed $D):
  %f = ref_element_addr %inner4 : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner4 : $D
  unreachable
}

// CHECK-LABEL: testInnerAdjacentPhi1: interior-liveness with: %inner3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy]
// CHECK-NEXT: testInnerAdjacentPhi1: interior-liveness with: %inner3

// CHECK-LABEL: testInnerAdjacentPhi1: interior_liveness_swift with: %inner3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: begin:      br bb4(%{{.*}} : $D)
// CHECK-NEXT: ends:       %{{.*}} = load [copy] %{{.*}} : $*C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  br bb4(%{{.*}} : $D)
// CHECK-NEXT:             %{{.*}} = ref_element_addr %{{.*}} : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy] %{{.*}} : $*C
// CHECK-NEXT: testInnerAdjacentPhi1: interior_liveness_swift with: %inner3
sil [ossa] @testInnerAdjacentPhi1 : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  br bb3(%copy1 : $C, %borrow1 : $C, %d1 :$D)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  %d2 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy2 : $C, %borrow2 : $C, %d2 :$D)

bb3(%outer3 : @owned $C, %inner3 : @guaranteed $C, %phi3 : @guaranteed $D):
  specify_test "interior-liveness %inner3"
  specify_test "interior_liveness_swift %inner3"
  br bb4(%phi3 : $D)

bb4(%phi4 : @guaranteed $D):
  %f = ref_element_addr %phi4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  unreachable
}

// CHECK-LABEL: testInnerAdjacentPhi2: interior-liveness with: %inner3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy]
// CHECK-NEXT: testInnerAdjacentPhi2: interior-liveness with: %inner3

// CHECK-LABEL: testInnerAdjacentPhi2: interior_liveness_swift with: %inner3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: begin:      br bb4(%{{.*}} : $D)
// CHECK-NEXT: ends:       %{{.*}} = load [copy] %{{.*}} : $*C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  br bb4(%{{.*}} : $D)
// CHECK-NEXT:             %{{.*}} = ref_element_addr %{{.*}} : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy] %{{.*}} : $*C
// CHECK-NEXT: testInnerAdjacentPhi2: interior_liveness_swift with: %inner3
sil [ossa] @testInnerAdjacentPhi2 : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  %d1 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy1 : $C, %borrow1 : $C, %d1 :$D)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  %d2 = unchecked_ref_cast %borrow2 : $C to $D
  br bb3(%copy2 : $C, %borrow2 : $C, %d2 :$D)

bb3(%outer3 : @owned $C, %inner3 : @guaranteed $C, %phi3 : @guaranteed $D):
  specify_test "interior-liveness %inner3"
  specify_test "interior_liveness_swift %inner3"
  br bb4(%phi3 : $D)

bb4(%phi4 : @guaranteed $D):
  %f = ref_element_addr %phi4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  unreachable
}

// CHECK-LABEL: testInnerNonAdjacentPhi: interior-liveness with: %inner3
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: dead def: [[DEF]] = argument of bb3 : $C
// CHECK-NEXT: testInnerNonAdjacentPhi: interior-liveness with: %inner3

// CHECK-LABEL: testInnerNonAdjacentPhi: interior_liveness_swift with: %inner3
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: begin:      br bb4(%{{.*}} : $D)
// CHECK-NEXT: ends:     
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: dead def: %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: testInnerNonAdjacentPhi: interior_liveness_swift with: %inner3
sil [ossa] @testInnerNonAdjacentPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  %d1 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy1 : $C, %borrow1 : $C, %d1 :$D)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  %d2 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy2 : $C, %borrow2 : $C, %d2 :$D)

bb3(%outer3 : @owned $C, %inner3 : @guaranteed $C, %phi3 : @guaranteed $D):
  specify_test "interior-liveness %inner3"
  specify_test "interior_liveness_swift %inner3"
  br bb4(%phi3 : $D)

bb4(%phi4 : @guaranteed $D):
  %f = ref_element_addr %phi4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  unreachable
}

// CHECK-LABEL: testScopedAddress: interior-liveness with: @argument[0]
// CHECK: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_access
// CHECK-NEXT: testScopedAddress: interior-liveness with: @argument[0]

// CHECK-LABEL: testScopedAddress: interior_liveness_swift with: @argument[0]
// CHECK: Interior liveness: %0 = argument of bb0 : $D
// CHECK-NEXT: begin:      %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: ends:       end_access %{{.*}} : $*C
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  %{{.*}} = begin_access [read] [static] %{{.*}} : $*C
// CHECK-NEXT:             %{{.*}} = ref_element_addr %0 : $D, #D.object
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_access %{{.*}} : $*C
// CHECK-NEXT: testScopedAddress: interior_liveness_swift with: @argument[0]
sil [ossa] @testScopedAddress : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  specify_test "interior-liveness @argument[0]"
  specify_test "interior_liveness_swift @argument[0]"
  %f = ref_element_addr %0 : $D, #D.object
  %access = begin_access [read] [static] %f : $*C
  %o = load [copy] %access : $*C
  end_access %access : $*C
  destroy_value %o : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testUnenclosedReborrow: interior-liveness with: %copy0a
// CHECK: Interior liveness:   [[DEF:%.*]] = copy_value %0 : $C
// CHECK-NEXT: Inner scope:   [[BORROW:%.*]] = begin_borrow [[DEF]] : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT:   %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3([[BORROW]] : $C)
// CHECK-NEXT: testUnenclosedReborrow: interior-liveness with: %copy0a

// CHECK-LABEL: testUnenclosedReborrow: interior_liveness_swift with: %copy0a
// CHECK: Interior liveness:   %{{.*}} = copy_value %0 : $C
// CHECK-NEXT: begin:      %{{.*}} = copy_value %0 : $C
// CHECK-NEXT: ends:       br bb3(%{{.*}} : $C)
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT:   Phi(value: %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(%{{.*}} : $C)
// CHECK-NEXT: testUnenclosedReborrow: interior_liveness_swift with: %copy0a
sil [ossa] @testUnenclosedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy0a = copy_value %0 : $C
  specify_test "interior-liveness %copy0a"
  specify_test "interior_liveness_swift %copy0a"
  %borrow1 = begin_borrow %copy0a : $C
  br bb3(%borrow1 : $C)

bb2:
  %copy0b = copy_value %0 : $C
  %borrow2 = begin_borrow %copy0b : $C
  br bb3(%borrow2 : $C)

bb3(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  unreachable
}

// CHECK-LABEL: testUnenclosedGuaranteedPhi: interior-liveness with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT:   %{{.*}} = argument of bb3 : $D
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(
// CHECK-NEXT: testUnenclosedGuaranteedPhi: interior-liveness with: %borrow1

// CHECK-LABEL: testUnenclosedGuaranteedPhi: interior_liveness_swift with: %borrow1
// CHECK: Interior liveness:   %{{.*}} = begin_borrow %{{.*}} : $C
// CHECK-NEXT: begin:      %{{.*}} = begin_borrow %{{.*}} : $C
// CHECK-NEXT: ends:       br bb3(%{{.*}} : $D)
// CHECK-NEXT: exits:    
// CHECK-NEXT: interiors:  %{{.*}} = unchecked_ref_cast %{{.*}} : $C to $D
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT:   Phi(value: %{{.*}} = argument of bb3 : $D)
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(%{{.*}} : $D)
// CHECK-NEXT: testUnenclosedGuaranteedPhi: interior_liveness_swift with: %borrow1
sil [ossa] @testUnenclosedGuaranteedPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy0a = copy_value %0 : $C
  %borrow1 = begin_borrow %copy0a : $C
  specify_test "interior-liveness %borrow1"
  specify_test "interior_liveness_swift %borrow1"
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  br bb3(%d1 : $D)

bb2:
  %copy0b = copy_value %0 : $C
  %borrow2 = begin_borrow %copy0b : $C
  %d2 = unchecked_ref_cast %borrow2 : $C to $D
  br bb3(%d2 : $D)

bb3(%phi : @guaranteed $D):
  unreachable
}

// =============================================================================
// ExtendedLiveness
// =============================================================================

// CHECK-LABEL: testExtendedPhi: extended-liveness with: %copy1
// CHECK: Extended liveness:   %{{.*}} = copy_value %0 : $C
// CHECK: lifetime-ending user:   br bb3(
// CHECK: lifetime-ending user:   destroy_value
// CHECK: last user:   br bb3(
// CHECK: last user:   destroy_value
// CHECK: testExtendedPhi: extended-liveness with: %copy1
sil [ossa] @testExtendedPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  specify_test "extended-liveness %copy1"
  br bb3(%copy1 : $C)

bb2:
  %copy2 = copy_value %0 : $C
  br bb3(%copy2 : $C)

bb3(%phi : @owned $C):
  destroy_value %phi : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: testExtendedReborrow: extended-liveness with: %borrow1
// CHECK: Extended liveness:   %{{.*}} = begin_borrow
// CHECK: lifetime-ending user:   br bb3(
// CHECK: lifetime-ending user:   end_borrow
// CHECK: last user:   br bb3(
// CHECK: last user:   end_borrow
// CHECK: testExtendedReborrow: extended-liveness with: %borrow1
sil [ossa] @testExtendedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  specify_test "extended-liveness %borrow1"
  br bb3(%copy1 : $C, %borrow1 : $C)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  br bb3(%copy2 : $C, %borrow2 : $C)

bb3(%phi : @owned $C, %reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  destroy_value %phi : $C
  %99 = tuple()
  return %99 : $()
}
