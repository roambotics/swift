// RUN: %target-sil-opt -test-runner %s -o /dev/null 2>&1 | %FileCheck %s
//
// TODO: when complete lifetime verification become the default for SIL verification,
// then consider moving all tests with 'unreachable' into a separate file with the flag
// -disable-ownership-verification

sil_stage canonical

import Builtin

enum FakeOptional<T> {
case none
case some(T)
}

class C {}
class D {
  var object: C
  @_borrowed @_hasStorage var borrowed: C { get set }
}

struct PairC {
  var first: C
  var second: C
}

sil @getC : $@convention(thin) () -> @owned C

// =============================================================================
// LinearLiveness
// =============================================================================

// CHECK-LABEL: begin running test 1 of 1 on testLinearRefElementEscape: linear-liveness with: @trace[0]
// CHECK-LABEL: Linear liveness:
// CHECK: lifetime-ending user:
// CHECK-SAME: end_borrow
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: end running test 1 of 1 on testLinearRefElementEscape
sil [ossa] @testLinearRefElementEscape : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "linear-liveness @trace[0]"
  %borrow = begin_borrow %0 : $C
  debug_value [trace] %borrow : $C
  cond_br undef, bb1, bb2

bb1:
  %d1 = unchecked_ref_cast %0 : $C to $D
  %f1 = ref_element_addr %d1 : $D, #D.object
  %p1 = address_to_pointer %f1 : $*C to $Builtin.RawPointer
  br bb3(%d1 : $D)
  
bb2:
  %d2 = unchecked_ref_cast %0 : $C to $D
  %f2 = ref_element_addr %d2 : $D, #D.object  
  %p2 = address_to_pointer %f2 : $*C to $Builtin.RawPointer
  br bb3(%d2 : $D)

bb3(%phi : @guaranteed $D):
  end_borrow %borrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testLinearBitwiseEscape: linear-liveness with: @trace[0]
// CHECK: Linear liveness:
// CHECK: lifetime-ending user:
// CHECK-SAME: end_borrow
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: end running test 1 of 1 on testLinearBitwiseEscape
sil [ossa] @testLinearBitwiseEscape : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "linear-liveness @trace[0]"
  %borrow = begin_borrow %0 : $C
  debug_value [trace] %borrow : $C
  cond_br undef, bb1, bb2

bb1:
  %d1 = unchecked_bitwise_cast %0 : $C to $D
  br bb3(%d1 : $D)
  
bb2:
  %d2 = unchecked_bitwise_cast %0 : $C to $D
  br bb3(%d2 : $D)

bb3(%phi : @unowned $D):
  end_borrow %borrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testLinearInnerReborrow: linear-liveness with: @argument[0]
// CHECK: Linear liveness:
// CHECK: lifetime-ending user:
// CHECK-SAME: destroy_value %0
// CHECK-NEXT: last user:   destroy_value %0
// CHECK-NEXT: end running test 1 of 1 on testLinearInnerReborrow
sil [ossa] @testLinearInnerReborrow : $@convention(thin) (@owned C) -> () {
bb0(%0 : @owned $C):
  specify_test "linear-liveness @argument[0]"
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $C
  br bb3(%borrow1 : $C)
  
bb2:
  %borrow2 = begin_borrow %0 : $C
  br bb3(%borrow2 : $C)

bb3(%phi : @guaranteed $C):
  end_borrow %phi : $C
  destroy_value %0 : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testLinearAdjacentReborrow: linear-liveness with: @trace[0]
// CHECK: lifetime-ending user:
// CHECK-SAME: br bb3
// CHECK-NEXT: lifetime-ending user: br bb3
// CHECK-NEXT: last user: br bb3
// CHECK-NEXT: last user: br bb3
// CHECK-NEXT: end running test 1 of 1 on testLinearAdjacentReborrow
sil [ossa] @testLinearAdjacentReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "linear-liveness @trace[0]"
  %borrow = begin_borrow %0 : $C
  debug_value [trace] %borrow : $C
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %borrow : $C
  br bb3(%borrow : $C, %borrow1 : $C)
  
bb2:
  %borrow2 = begin_borrow %borrow : $C
  br bb3(%borrow : $C, %borrow2 : $C)

bb3(%outer : @guaranteed $C, %inner : @guaranteed $C):
  end_borrow %inner : $C
  end_borrow %outer : $C
  %99 = tuple()
  return %99 : $()
}

// =============================================================================
// visitInnerAdjacentPhis
// =============================================================================

// CHECK-LABEL: begin running test 1 of 1 on pay_the_phi: visit-inner-adjacent-phis with: @trace[0]
// CHECK: sil [ossa] @pay_the_phi : {{.*}} {
// CHECK:   [[C:%[^,]+]] = apply
// CHECK:   [[BORROW1:%[^,]+]] = begin_borrow %1
// CHECK:   [[BORROW2:%[^,]+]] = begin_borrow %1
// CHECK:   br [[EXIT:bb[0-9]+]]([[C]] : $C, [[BORROW1]] : $C, [[BORROW2]] :
// CHECK: [[EXIT]]({{%[^,]+}} : @owned $C, [[GUARANTEED1:%[^,]+]] : @reborrow @guaranteed $C, [[GUARANTEED2:%[^,]+]] :
// CHECK: } // end sil function 'pay_the_phi'
//
// CHECK:[[GUARANTEED1]] = argument of [[EXIT]]
// CHECK:[[GUARANTEED2]] = argument of [[EXIT]]
// CHECK-LABEL: end running test 1 of 1 on pay_the_phi: visit-inner-adjacent-phis with: @trace[0]
sil [ossa] @pay_the_phi : $@convention(thin) () -> () {
entry:
  %getC = function_ref @getC : $@convention(thin) () -> @owned C
  %c = apply %getC() : $@convention(thin) () -> @owned C
  %borrow1 = begin_borrow %c : $C
  %borrow2 = begin_borrow %c : $C
  %borrow3 = begin_borrow %borrow2 : $C
  br exit(%c : $C, %borrow1 : $C, %borrow2 : $C, %borrow3 : $C)

exit(%owned : @owned $C, %guaranteed_1 : @guaranteed $C, %guaranteed_2 : @guaranteed $C, %guaranteed_3 : @guaranteed $C):
  specify_test "visit-inner-adjacent-phis @trace[0]"
  debug_value [trace] %owned : $C
  end_borrow %guaranteed_3 : $C
  end_borrow %guaranteed_2 : $C
  end_borrow %guaranteed_1 : $C
  destroy_value %owned : $C
  %retval = tuple ()
  return %retval : $()
}

// CHECK-LABEL: begin running test 1 of 1 on pay_the_phi_forward: visit-inner-adjacent-phis with: @trace[0]
// CHECK: bb1(%{{.*}} : @reborrow @guaranteed $C, [[INNER:%.*]] : @guaranteed $D):    // Preds: bb0
// CHECK: } // end sil function 'pay_the_phi_forward'
// CHECK: [[INNER]] = argument of bb1 : $D
// CHECK: end running test 1 of 1 on pay_the_phi_forward: visit-inner-adjacent-phis with: @trace[0]
sil [ossa] @pay_the_phi_forward : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %borrow0 = begin_borrow %0 : $C
  %d0 = unchecked_ref_cast %borrow0 : $C to $D
  br exit(%borrow0 : $C, %d0 : $D)

exit(%reborrow : @guaranteed $C, %phi : @guaranteed $D):
  specify_test "visit-inner-adjacent-phis @trace[0]"
  debug_value [trace] %reborrow : $C
  %f = ref_element_addr %phi : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %reborrow : $C
  %retval = tuple ()
  return %retval : $()
}

// =============================================================================
// InteriorLiveness and visitAdjacentPhis
// =============================================================================

// CHECK-LABEL: begin running test 1 of 1 on testInteriorRefElementEscape: interior-liveness with: @trace[0]
// CHECK: Incomplete liveness: Escaping address
// CHECK: last user:   %{{.*}} = address_to_pointer
// CHECK-NEXT: end running test 1 of 1 on testInteriorRefElementEscape:
sil [ossa] @testInteriorRefElementEscape : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness @trace[0]"
  %d = unchecked_ref_cast %0 : $C to $D
  debug_value [trace] %d : $D
  %f1 = ref_element_addr %d : $D, #D.object  
  %p1 = address_to_pointer %f1 : $*C to $Builtin.RawPointer
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInteriorReborrow: interior-liveness with: @trace[0]
// CHECK: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb1
// CHECK-NEXT: end running test 1 of 1 on testInteriorReborrow: interior-liveness with: @trace[0]
sil [ossa] @testInteriorReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness @trace[0]"
  %borrow = begin_borrow %0 : $C
  debug_value [trace] %borrow : $C
  br bb1(%borrow : $C)

bb1(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInteriorDominatedGuaranteedForwardingPhi: interior-liveness with: @argument[0]
// CHECK: Complete liveness
// CHECK: last user: %{{.*}} load [copy]
// CHECK-NEXT: end running test 1 of 1 on testInteriorDominatedGuaranteedForwardingPhi:
sil [ossa] @testInteriorDominatedGuaranteedForwardingPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness @argument[0]"
  cond_br undef, bb1, bb2

bb1:
  %d1 = unchecked_ref_cast %0 : $C to $D
  br bb3(%d1 : $D)

bb2:
  %d2 = unchecked_ref_cast %0 : $C to $D
  br bb3(%d2 : $D)

bb3(%phi : @guaranteed $D):
  %f = ref_element_addr %phi : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInteriorNondominatedGuaranteedForwardingPhi: interior-liveness with: @trace[0]
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(
// CHECK-NEXT: end running test 1 of 1 on testInteriorNondominatedGuaranteedForwardingPhi: interior-liveness with: @trace[0]
sil [ossa] @testInteriorNondominatedGuaranteedForwardingPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %0 : $C
  debug_value [trace] %borrow1 : $C
  specify_test "interior-liveness @trace[0]"
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  br bb3(%borrow1 : $C, %d1 : $D)

bb2:
  %borrow2 = begin_borrow %0 : $C
  %d2 = unchecked_ref_cast %borrow2 : $C to $D
  br bb3(%borrow2 : $C, %d2 : $D)

bb3(%reborrow : @guaranteed $C, %phi : @guaranteed $D):
  %f = ref_element_addr %phi : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %reborrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerDominatedReborrow: interior-liveness with: @argument[0]
// CHECK: Interior liveness:
// CHECK: Inner scope:   %{{.*}} = begin_borrow %0 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_borrow
// CHECK-NEXT: end running test 1 of 1 on testInnerDominatedReborrow: interior-liveness with: @argument[0]
sil [ossa] @testInnerDominatedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  specify_test "interior-liveness @argument[0]"
  %borrow = begin_borrow %0 : $C
  br bb1(%borrow : $C)

bb1(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerDominatedReborrow2: interior-liveness with: @trace[0]
// CHECK: Inner scope:   %{{.*}} = begin_borrow %1 : $C
// CHECK-NEXT: Inner scope: %{{.*}} = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   destroy_value
// CHECK-NEXT: end running test 1 of 1 on testInnerDominatedReborrow2: interior-liveness with: @trace[0]
sil [ossa] @testInnerDominatedReborrow2 : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  %copy0a = copy_value %0 : $C
  %copy0b = copy_value %0 : $C
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %copy0a : $C
  cond_br undef, bb1, bb2

bb1:
  %borrow1 = begin_borrow %copy0a : $C
  br bb3(%borrow1 : $C)

bb2:
  %borrow2 = begin_borrow %copy0b : $C
  br bb3(%borrow2 : $C)

bb3(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  destroy_value %copy0a : $C
  destroy_value %copy0b : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerNonDominatedReborrow: interior-liveness with: @trace[0]
// CHECK: Inner scope:   [[BORROW:%.*]] = begin_borrow [[DEF:%.*]] : $D
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3([[DEF]] : $D, [[BORROW]] : $D)
// CHECK-NEXT: end running test 1 of 1 on testInnerNonDominatedReborrow: interior-liveness with: @trace[0]
sil [ossa] @testInnerNonDominatedReborrow : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  specify_test "interior-liveness @trace[0]"
  %borrow1 = begin_borrow %0 : $D
  debug_value [trace] %borrow1 : $D
  %inner1 = begin_borrow %borrow1 : $D
  br bb3(%borrow1 : $D, %inner1 : $D)

bb2:
  %borrow2 = begin_borrow %0 : $D
  %inner2 = begin_borrow %borrow2 : $D
  br bb3(%borrow2 : $D, %inner2 : $D)

bb3(%outer : @guaranteed $D, %inner : @guaranteed $D):
  %f = ref_element_addr %inner : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner : $D
  end_borrow %outer : $D
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerAdjacentReborrow1: interior-liveness with: @trace[0]
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb4 : $D
// CHECK:      regular user:   end_borrow
// CHECK-NEXT: regular user:   br bb4(
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user: end_borrow
// CHECK-NEXT: end running test 1 of 1 on testInnerAdjacentReborrow1: interior-liveness with: @trace[0]
sil [ossa] @testInnerAdjacentReborrow1 : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $D
  %borrow1 = begin_borrow %copy1 : $D
  br bb3(%copy1 : $D, %borrow1 : $D)

bb2:
  %copy2 = copy_value %0 : $D
  %borrow2 = begin_borrow %0 : $D
  br bb3(%copy2 : $D, %borrow2 : $D)

bb3(%outer3 : @owned $D, %inner3 : @guaranteed $D):
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %outer3 : $D
  br bb4(%inner3 : $D)

bb4(%inner4 : @guaranteed $D):
  %f = ref_element_addr %inner4 : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner4 : $D
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerAdjacentReborrow2: interior-liveness with: @trace[0]
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb3 : $D
// CHECK:      Inner scope: %{{.*}} = argument of bb4 : $D
// CHECK:      regular user:   end_borrow
// CHECK-NEXT: regular user:   br bb4(
// CHECK-NEXT: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user: end_borrow
// CHECK-NEXT: end running test 1 of 1 on testInnerAdjacentReborrow2: interior-liveness with: @trace[0]
sil [ossa] @testInnerAdjacentReborrow2 : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $D
  %borrow1 = begin_borrow %copy1 : $D
  br bb3(%copy1 : $D, %borrow1 : $D)

bb2:
  %copy2 = copy_value %0 : $D
  %borrow2 = begin_borrow %0 : $D
  br bb3(%copy2 : $D, %borrow2 : $D)

bb3(%outer3 : @owned $D, %inner3 : @guaranteed $D):
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %outer3 : $D
  br bb4(%inner3 : $D)

bb4(%inner4 : @guaranteed $D):
  %f = ref_element_addr %inner4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner4 : $D
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerNonAdjacentReborrow: interior-liveness with: @trace[0]
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $D
// CHECK-NOT:  Inner scope
// CHECK-NOT:  lifetime-ending user
// CHECK:      Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: dead def: [[DEF]] = argument of bb3 : $D
// CHECK-NEXT: end running test 1 of 1 on testInnerNonAdjacentReborrow: interior-liveness with: @trace[0]
sil [ossa] @testInnerNonAdjacentReborrow : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $D
  %borrow1 = begin_borrow %0 : $D
  br bb3(%copy1 : $D, %borrow1 : $D)

bb2:
  %copy2 = copy_value %0 : $D
  %borrow2 = begin_borrow %0 : $D
  br bb3(%copy2 : $D, %borrow2 : $D)

bb3(%outer3 : @owned $D, %inner3 : @guaranteed $D):
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %outer3 : $D
  br bb4(%inner3 : $D)

bb4(%inner4 : @guaranteed $D):
  %f = ref_element_addr %inner4 : $D, #D.object  
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  end_borrow %inner4 : $D
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerAdjacentPhi1: interior-liveness with: @trace[0]
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy]
// CHECK-NEXT: end running test 1 of 1 on testInnerAdjacentPhi1: interior-liveness with: @trace[0]
sil [ossa] @testInnerAdjacentPhi1 : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  br bb3(%copy1 : $C, %borrow1 : $C, %d1 :$D)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  %d2 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy2 : $C, %borrow2 : $C, %d2 :$D)

bb3(%outer3 : @owned $C, %inner3 : @guaranteed $C, %phi3 : @guaranteed $D):
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %inner3 : $C
  br bb4(%phi3 : $D)

bb4(%phi4 : @guaranteed $D):
  %f = ref_element_addr %phi4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerAdjacentPhi2: interior-liveness with: @trace[0]
// CHECK: Interior liveness: %{{.*}} = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   %{{.*}} = load [copy]
// CHECK-NEXT: end running test 1 of 1 on testInnerAdjacentPhi2: interior-liveness with: @trace[0]
sil [ossa] @testInnerAdjacentPhi2 : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  %d1 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy1 : $C, %borrow1 : $C, %d1 :$D)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  %d2 = unchecked_ref_cast %borrow2 : $C to $D
  br bb3(%copy2 : $C, %borrow2 : $C, %d2 :$D)

bb3(%outer3 : @owned $C, %inner3 : @guaranteed $C, %phi3 : @guaranteed $D):
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %inner3 : $C
  br bb4(%phi3 : $D)

bb4(%phi4 : @guaranteed $D):
  %f = ref_element_addr %phi4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testInnerNonAdjacentPhi: interior-liveness with: @trace[0]
// CHECK: Interior liveness: [[DEF:%.*]] = argument of bb3 : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: dead def: [[DEF]] = argument of bb3 : $C
// CHECK-NEXT: end running test 1 of 1 on testInnerNonAdjacentPhi: interior-liveness with: @trace[0]
sil [ossa] @testInnerNonAdjacentPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  %borrow1 = begin_borrow %copy1 : $C
  %d1 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy1 : $C, %borrow1 : $C, %d1 :$D)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  %d2 = unchecked_ref_cast %0 : $C to $D
  br bb3(%copy2 : $C, %borrow2 : $C, %d2 :$D)

bb3(%outer3 : @owned $C, %inner3 : @guaranteed $C, %phi3 : @guaranteed $D):
  specify_test "interior-liveness @trace[0]"
  debug_value [trace] %inner3 : $C
  br bb4(%phi3 : $D)

bb4(%phi4 : @guaranteed $D):
  %f = ref_element_addr %phi4 : $D, #D.object
  %o = load [copy] %f : $*C
  destroy_value %o : $C
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testScopedAddress: interior-liveness with: @argument[0]
// CHECK: Complete liveness
// CHECK-NEXT: Unenclosed phis {
// CHECK-NEXT: }
// CHECK-NEXT: last user:   end_access
// CHECK-NEXT: end running test 1 of 1 on testScopedAddress: interior-liveness with: @argument[0]
sil [ossa] @testScopedAddress : $@convention(thin) (@guaranteed D) -> () {
bb0(%0 : @guaranteed $D):
  specify_test "interior-liveness @argument[0]"
  %f = ref_element_addr %0 : $D, #D.object
  %access = begin_access [read] [static] %f : $*C
  %o = load [copy] %access : $*C
  end_access %access : $*C
  destroy_value %o : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testUnenclosedReborrow: interior-liveness with: @trace[0]
// CHECK: Interior liveness:   [[DEF:%.*]] = copy_value %0 : $C
// CHECK-NEXT: Inner scope:   [[BORROW:%.*]] = begin_borrow [[DEF]] : $C
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT:   %{{.*}} = argument of bb3 : $C
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3([[BORROW]] : $C)
// CHECK-NEXT: end running test 1 of 1 on testUnenclosedReborrow: interior-liveness with: @trace[0]
sil [ossa] @testUnenclosedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  specify_test "interior-liveness @trace[0]"
  %copy0a = copy_value %0 : $C
  debug_value [trace] %copy0a : $C
  %borrow1 = begin_borrow %copy0a : $C
  br bb3(%borrow1 : $C)

bb2:
  %copy0b = copy_value %0 : $C
  %borrow2 = begin_borrow %copy0b : $C
  br bb3(%borrow2 : $C)

bb3(%reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  unreachable
}

// CHECK-LABEL: begin running test 1 of 1 on testUnenclosedGuaranteedPhi: interior-liveness with: @trace[0]
// CHECK: Interior liveness:   %{{.*}} = begin_borrow
// CHECK: Complete liveness
// CHECK: Unenclosed phis {
// CHECK-NEXT:   %{{.*}} = argument of bb3 : $D
// CHECK-NEXT: }
// CHECK-NEXT: last user:   br bb3(
// CHECK-NEXT: end running test 1 of 1 on testUnenclosedGuaranteedPhi: interior-liveness with: @trace[0]
sil [ossa] @testUnenclosedGuaranteedPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  specify_test "interior-liveness @trace[0]"
  %copy0a = copy_value %0 : $C
  %borrow1 = begin_borrow %copy0a : $C
  debug_value [trace] %borrow1 : $C
  %d1 = unchecked_ref_cast %borrow1 : $C to $D
  br bb3(%d1 : $D)

bb2:
  %copy0b = copy_value %0 : $C
  %borrow2 = begin_borrow %copy0b : $C
  %d2 = unchecked_ref_cast %borrow2 : $C to $D
  br bb3(%d2 : $D)

bb3(%phi : @guaranteed $D):
  unreachable
}

// =============================================================================
// ExtendedLiveness
// =============================================================================

// CHECK-LABEL: begin running test 1 of 1 on testExtendedPhi: extended-liveness with: @trace[0]
// CHECK: Extended liveness:   %{{.*}} = copy_value %0 : $C
// CHECK: lifetime-ending user:   br bb3(
// CHECK: lifetime-ending user:   destroy_value
// CHECK: last user:   br bb3(
// CHECK: last user:   destroy_value
// CHECK: end running test 1 of 1 on testExtendedPhi: extended-liveness with: @trace[0]
sil [ossa] @testExtendedPhi : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  specify_test "extended-liveness @trace[0]"
  %copy1 = copy_value %0 : $C
  debug_value [trace] %copy1 : $C
  br bb3(%copy1 : $C)

bb2:
  %copy2 = copy_value %0 : $C
  br bb3(%copy2 : $C)

bb3(%phi : @owned $C):
  destroy_value %phi : $C
  %99 = tuple()
  return %99 : $()
}

// CHECK-LABEL: begin running test 1 of 1 on testExtendedReborrow: extended-liveness with: @trace[0]
// CHECK: Extended liveness:   %{{.*}} = begin_borrow
// CHECK: lifetime-ending user:   br bb3(
// CHECK: lifetime-ending user:   end_borrow
// CHECK: last user:   br bb3(
// CHECK: last user:   end_borrow
// CHECK: end running test 1 of 1 on testExtendedReborrow: extended-liveness with: @trace[0]
sil [ossa] @testExtendedReborrow : $@convention(thin) (@guaranteed C) -> () {
bb0(%0 : @guaranteed $C):
  cond_br undef, bb1, bb2

bb1:
  %copy1 = copy_value %0 : $C
  specify_test "extended-liveness @trace[0]"
  %borrow1 = begin_borrow %copy1 : $C
  debug_value [trace] %borrow1 : $C
  br bb3(%copy1 : $C, %borrow1 : $C)

bb2:
  %copy2 = copy_value %0 : $C
  %borrow2 = begin_borrow %copy2 : $C
  br bb3(%copy2 : $C, %borrow2 : $C)

bb3(%phi : @owned $C, %reborrow : @guaranteed $C):
  end_borrow %reborrow : $C
  destroy_value %phi : $C
  %99 = tuple()
  return %99 : $()
}
